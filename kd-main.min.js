/**
*  Kardia World 3D visualization viewer
*
*  Copyright (C) 2014-2025 present Kardia World
**/

const KD_MAIN_JS_VERSION = '2.0.6';

function createEle(ele, object) {
    var e;
    if (!ele) return
    if (typeof ele == 'string') {
        e = document.createElement(ele)
    } else if (typeof ele === 'object' && ele.tag) {
        e = document.createElement(ele.tag)
        if (ele.id) e.id = ele.id
        if (ele.class && typeof ele.class === 'string') e.setAttribute('class', ele.class)
        if (ele.style && typeof ele.style === 'string') e.setAttribute('style', ele.style)
        if (ele.type && typeof ele.type === 'string') e.setAttribute('type', ele.type)
        // if (ele.dataset !== undefined && typeof ele.dataset === 'obejct' &&
        //   ele.dataset.key !== undefined && typeof ele.dataset.key === 'string' &&
        //   ele.dataset.value !== undefined && typeof ele.dataset.value === 'string') e.dataset[ele.dataset.key] = ele.dataset.value
        if (ele.dataset !== undefined) {
            if (Array.isArray(ele.dataset)) {
                for (const i in ele.dataset) {
                    let data = ele.dataset[i];
                    if (data.key !== undefined && typeof data.key === 'string' &&
                        data.value !== undefined && typeof data.value === 'string') e.dataset[data.key] = data.value
                }
            } else if (typeof ele.dataset === 'obejct') {
                let data = ele.dataset;
                if (data.key !== undefined && typeof data.key === 'string' &&
                    data.value !== undefined && typeof data.value === 'string') e.dataset[data.key] = data.value
            }
        }
        if (ele.innerHTML && typeof ele.innerHTML === 'string') e.innerHTML = ele.innerHTML
        if (ele.event)
            if (ele.event && typeof ele.event === 'object' &&
                ele.event.event && typeof ele.event.event === 'string' &&
                ele.event.function && typeof ele.event.function === 'function') {
                if (!ele.event.capture) ele.event.capture = false
                e.addEventListener(ele.event.event, ele.event.function, ele.event.capture)
            }
        if (ele.disabled == 1 || ele.disabled == true) e.disabled = true
        else if (ele.disabled == 0 || ele.disabled == false) e.disabled = false
        if (ele.value !== undefined) e.value = ele.value
        if (ele.type) e.type = ele.type
        if (ele.placeholder !== undefined) e.placeholder = ele.placeholder
        if (ele.tag == 'input' && ele.type == 'checkbox' && ele.checked !== undefined) e.checked = ele.checked
        if (ele.parent) {
            if (typeof ele.parent === 'string' && document.getElementById(ele.parent)) document.getElementById(ele.parent).appendChild(e)
            else if (isElement(ele.parent)) ele.parent.appendChild(e)
        }
        if (ele.children) {
            if (typeof ele.children === 'string' && document.getElementById(ele.children)) e.appendChild(document.getElementById(ele.children))
            else if (isElement(ele.children)) e.appendChild(ele.children)
        }
    }
    return e
}
function getElement(id) {
    return document.getElementById(id);
}
function appendChild(parent, child) {
    if (!parent || !child) return
    getElement(parent) ? pr = getElement(parent) : pr = parent; getElement(child) ? ch = getElement(child) : ch = child;
    if (parent == "body") { document.body.appendChild(ch); } else { pr.appendChild(ch); }
}
function removeChild(child) {
    var c, p; getElement(child) ? c = getElement(child) : c = child; p = getElement(c).parentNode; p.removeChild(c);
}
function createFullEle(htmlTag, id, parentID, setattribute, classOrStyle = 'class') {
    let ele = document.createElement(htmlTag.toString());
    if (id.toString()) ele.id = id;
    if (parentID == "body") document.body.appendChild(ele);
    else if (parentID == "head") document.head.appendChild(ele);
    else if (parentID) parentID.appendChild(ele);
    else if (getElement(parentID)) getElement(parentID).appendChild(ele);
    else { console.error('"createFullEle" failed!'); return }
    if (setattribute) ele.setAttribute(classOrStyle, setattribute)
    return ele;
}
function replaceID(oriID, newID) {
    getElement(oriID) ? ori = getElement(oriID) : ori = oriID; document.getElementById(ori).id = newID;
}
function getSceneDateFolder() {
    for (let i = 0; i < document.head.children.length; i++) {
        var dom = document.head.children[i];
        if (dom.href) {
            let j = dom.href, jr = dom.rel;
            if (j.match(/favicon.ico/g) && jr == 'icon') {
                return j.split('/favicon.ico')[0] + '/';
            }
        }
    }
}
function getExtraAssetUrl(fileName) {
    return getSceneDateFolder() + 'extra-assets/' + fileName.toString();
}
function getParentUrl() {
    let parentUrl = null;
    if (parent !== window) {
        try { parentUrl = parent.location.href; }
        catch (e) { parentUrl = document.referrer; }
    }
    return parentUrl;
}

function checkIsMobile() {
    let isMobile = 0;
    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        isMobile = 1;
    }
    return isMobile;
}

function loadCSS(link, parent = 'head') {
    let css = createEle('link');
    css.rel = 'stylesheet'; css.type = 'text/css'; css.href = link;
    parent == 'head' ? document.head.appendChild(css) :
        parent == 'body' ? document.body.appendChild(css) :
            getElement(parent) ? getElement(parent).appendChild(css) : console.error(css + 'load faild.');
}
function loadJS(link, parent = 'head') {
    let js = document.createElement('script');
    js.type = 'text/javascript';
    js.src = link;
    parent == 'head' ? document.head.appendChild(js) :
        parent == 'body' ? document.body.appendChild(js) :
            getElement(parent) ? getElement(parent).appendChild(js) : console.error(link + 'load faild.');
}

function gtag_data(category = 'vr_scene', event = '', label = '') {
    //use eval(gtag_data (vr_scene,event,label)) on innerHTML
    //event = product name + action (Metal Home - Click / Metal Home - Download/...)
    //category = vr_scene
    //label = tittle
    if (document.getElementById('gtag')) {
        gtag('event', event, {
            'event_category': category,
            'event_label': label,
        });
    }
}
function restrictDomain() {
    var arr = [], lo = 'loca', ho = 'lho', t = 'st', v = 'vr.', x = 'xr.', ka = 'kar', di = 'dia', wo = 'world', ve = 'verse', co = '.com', o = '.io',
        de = 'dex', xxr = 'xr', arc = 'archi', ma = 'mat', arti = 'art', tud = 'itude', gAl = '.gal', LrY = 'lery', ga = gAl + LrY;
    arr.push(lo + ho + t, v + ka + di + wo + co, x + ka + di + ve + co, v + arc + ma + o, v + de + '-' + xxr + co, v + de + + xxr + o, v + de + xxr + o, v + arti + tud + ga,
        'iddiy.kardiaverse.com');
    if (arr.includes(window['loc' + 'ati' + 'on']['ho' + 'stna' + 'me'])) { return 1 } else { return 0 }
}
function isValidUrl(string) {
    try { new URL(string); return true; } catch (err) { return false; }
}
//Returns true if it is a DOM node
function isNode(o) {
    return (
        typeof Node === "object" ? o instanceof Node :
            o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string"
    );
}

//Returns true if it is a DOM element    
function isElement(o) {
    return (
        typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
            o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string"
    );
}
function openUrl(link, newTab) { if (newTab == null || false ? newTab = '' : newTab = '_blank'); window.open(newTab); }
function openNewUrl(link) { window.open(link, '_blank'); }

function decodeHtmlToJson(html) {
    const htmlEntities = {
        "&": "\&",
        "\\": "\\",
        "<": "\<",
        ">": "\>",
        '"': "\"",
        "'": "\'",
    };
    return html.replace(/([&<>\"'])/g, match => htmlEntities[match]);
}
function removeHtmlScriptTag(html) {
    return html.toString().replace(/\<script\>/gi, "").replace(/\<\/script\>/gi, "");
}
function decodeHTMLEntities(html, all = 0) {
    if (all) {
        var textArea = document.createElement('textarea');
        textArea.innerHTML = html;
        return textArea.value;
    } else {
        const htmlEntities = {
            "&": "&amp;",
            "\\": "&bsol;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&apos;",
        };
        return html.toString().replace(/([&<>\"'])/g, match => htmlEntities[match]);
    }
}
function encodeHTMLEntities(html) {
    var textArea = document.createElement('textarea');
    textArea.innerText = text;
    return textArea.innerHTML;
}

function sceneVideoPopUp(type, videoName) {
    //type = videoTexture/videoExtraAssets/videoLink 
    //videoTexture use for use scene video
    //videoExtraAssets is put video file inside Extra-Assets
    //videoLink = url link
    //'videoTexture' & 'videoRxtraAssets' videoName is video file name, exclude .mp4
    //'vieoLink' videoName only url link
    if (getElement('scene-video-label')) {
        if (getElement('scene-video-label').style.display != "") {
            getElement('scene-video-label').style.display = "";
        }
    } else {
        createFullEle('div', 'scene-video-label', 'body', 'ext-popup ext-html-label-animated');
        getElement('scene-video-label').setAttribute('style', 'max-width:max-content; display:auto; top:0 ;bottom:0 ;left:0;right:0;');
        createFullEle('div', 'scene-video', 'scene-video-label ext-popup-content');
        getElement('scene-video').setAttribute('style', 'max-width:100vw; max-height:100vh; width:100vw; height:100vh;');
        createFullEle('div', 'scene-video-cls', 'scene-video-label ext-popup-close-button-panel', 'ext-popup-close-button-panel');
        getElement('scene-video-cls').style.position = 'absolute';
        getElement('scene-video-cls').style.top = '0';
        getElement('scene-video-cls').style.right = '0';
        createFullEle('div', 'scene-video-cls-icon', 'scene-video-cls ext-popup-close-button');

        getElement('scene-video-cls').addEventListener("click", () => {
            if (getElement('scene-video-label').style.display != "none") {
                getElement('scene-video-label').style.display = "none";
                getElement('scene-video').innerHTML = "";
            }
        })
    }
    let getFileName = getElement('play-button').src.replace('/webwalk/img/play.svg', '');
    let enCodeVideoLink = encodeURI(videoName);
    var videoLink = null;
    if (type == 'videoTexture') {
        var videoLink = `${getFileName}/video/mp4/${enCodeVideoLink}.mp4`;
    } else if (type == 'videoExtraAssets') {
        var videoLink = `${getFileName}/extra-assets/${enCodeVideoLink}.mp4`;
    } else if (type == 'videoLink') {
        var videoLink = enCodeVideoLink;
    }
    let iframeVideo = createEle('iframe');
    iframeVideo.src = videoLink;
    iframeVideo.width = '100%';
    iframeVideo.height = '100%';
    iframeVideo.maxWidth = '100%';
    iframeVideo.maxHeight = '100%';
    iframeVideo.allow = 'autoplay';
    iframeVideo.frameBorder = '0';
    iframeVideo.setAttribute('allowFullScreen', '');
    getElement('scene-video').appendChild(iframeVideo);
}

function setTimeAutoSwitchView(view, time = 10000, intervalMS = 1001, callback) {
    if (!view) {
        console.error(`'setTimeBackStartView' function parameters missing 'view' name.`);
        return;
    }
    var startView, paddingTime, currentPosition, currentView, checklocation = null,
        timing = 0, startX, startY, startZ, trackingIntervalMs; kd = this.function.kd();

    startView = view;
    paddingTime = time; //1sec = 1000
    currentPosition = true;

    currentView = startView;
    trackingIntervalMs = intervalMS;

    if (!startX) {
        startX = kd.getCameraPosition().x;
        startY = kd.getCameraPosition().y;
        startZ = kd.getCameraPosition().z;
    }
    checklocation = window.setInterval(returnToStart, trackingIntervalMs);

    function checkCamera() {
        if (currentView != startView) { return false; } else { return true; }
    }

    function checkPosition() {
        if (startX != kd.getCameraPosition().x || startY != kd.getCameraPosition().y || startZ != kd.getCameraPosition().z) {
            currentPosition = false;
        } else { currentPosition = true; }
        return currentPosition;
    }

    function checkTime() {
        if (timing < paddingTime) { timing = timing + trackingIntervalMs; }
        return timing;
    }

    function returnToStart() {
        if (checkPosition() && checkCamera()) {
            timing = 0;
        } else {
            if (checkTime() >= paddingTime) {
                kd.switchToView(startView);
                timing = 0;
            }
        }
        if (document.getElementById('timing-back-start')) {
            var tbs = document.getElementById('timing-back-start');
            var ct = ((time / 1000) - (Math.round(timing) / 1000)).toFixed(0);
            tbs.innerHTML = `Click Back To Start. (Auto back after ${ct}sec)`
        }
    }

    document.addEventListener('keydown', (event) => { timing = 0; }, false);
    document.addEventListener('click', (e) => { timing = 0; }, false);
    document.addEventListener('mousemove', (e) => { timing = 0; }, false);

    kd.onViewSwitchDone(function (ViewName, view) {
        currentView = ViewName;
        if (currentView == startView) { timing = 0; }
    });

    var c = { time: (time / 1000), view: view };
    if (typeof callback === 'function') { callback(c); }
    if (!callback) {
        var tbs = document.createElement('div');
        tbs.id = 'timing-back-start';
        tbs.setAttribute("class", "menu-1-ui-hoverable");
        tbs.innerHTML = `Click Back To Start. <span>(Auto back after ${c.time}sec)</span>`;
        document.body.appendChild(tbs);
        var tbsc = document.createElement('style');
        tbsc.innerHTML = `
            #timing-back-start {position: absolute;z-index: 102;top: 10px;left: 10px;overflow: hidden;background-color: var(--bg-clr-t-09, hsla(0,0%,100%,.9));box-shadow: var(--buttom-box-shadow, 0 0 0 1px rgb(0 0 0 / 10%));color: black;border-radius: 100px;padding: 11px 15px;line-height: 22px;font-weight: 700;cursor: pointer;max-width: calc(100% - 80px);display: flex;flex-wrap: wrap;}
            `
        document.body.appendChild(tbsc);
        tbs.addEventListener("click", () => {
            viewer.switchToView(c.view);
        });
    }
}

function insertHTML(link = "") {
    var z, i, elmnt, file, xhttp;
    /* Loop through a collection of all HTML elements: */
    z = document.getElementsByTagName("*");
    for (i = 0; i < z.length; i++) {
        elmnt = z[i];
        /*search for elements with a certain atrribute:*/
        file = elmnt.getAttribute("w3-include-html");
        if (file) {
            /* Make an HTTP request using the attribute value as the file name: */
            xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4) {
                    if (this.status == 200) { elmnt.innerHTML = this.responseText; }
                    if (this.status == 404) { elmnt.innerHTML = "Page not found."; }
                    /* Remove the attribute, and call this function once more: */
                    elmnt.removeAttribute("w3-include-html");
                    insertHTML();
                }
            }
            xhttp.open("GET", file, false); //true or false
            xhttp.send();
            /* Exit the function: */
            return;
        }
    }
}

function fullScreenBtn(appendParent = '', css = '', content = '') {
    createFullEle('div', 'fullscreen-btn', appendParent);
    let fs = getElement('fullscreen-btn');
    if (content == '') {
        fs.innerHTML = "<i class='fas fa-expand'></i>";
    } else {
        fs.innerHTML = content;
    }
    if (css != '') { fs.setAttribute('class', css); }
    function rfs() {
        let element = document.body, requestFullScreenFn =
            element.mozRequestFullScreen || element.webkitRequestFullscreen || element.msRequestFullscreen || element.requestFullscreen;
        requestFullScreenFn.call(element); fs.addEventListener("click", cfs); fs.removeEventListener("click", rfs);
    }
    function cfs() {
        if (document.exitFullscreen) { document.exitFullscreen() }
        else if (document.webkitExitFullscreen) { document.webkitExitFullscreen() }
        else if (document.msExitFullscreen) { document.msExitFullscreen() }
        else if (document.mozRequestFullScreen) { document.mozRequestFullScreen() }
        fs.addEventListener("click", rfs); fs.removeEventListener("click", cfs);
    }
    fs.addEventListener("click", rfs);
}

(function () {

    (function check_scene_version() {
        if (!restrictDomain()) { return }
        if (window.location.host.match(/localhost/g)) { window.KD_SCENE_VERSION = -1; return }
        var request = new XMLHttpRequest();
        request.open("GET", getSceneDateFolder() + 'web' + 'walk/VER' + 'SION', false);
        request.send(null);
        if (request.status === 200) {
            if (request.status === 200) {
                window.KD_SCENE_VERSION = request.responseText.replace(/(\r\n|\r|\n)/g, '')
            }
        }
    })();
    (function load_fontawesome() {
        if (!restrictDomain()) { return }
        var links = document.querySelectorAll("link"), fa = false;
        for (let i = 0; i < links.length; i++) {
            var href = links[i].href;
            if (href.match(/font-awesome/g) || href.match(/fontawesome/g)) { fa = true; break }
        }
        if (!fa) {
            let link = document.createElement('link'); link.rel = 'stylesheet'; link.type = 'text/css';
            link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css';
            document.head.appendChild(link);
        }
    })();
    (function load_jquery() {
        if (!restrictDomain()) { return }
        if (!window.jQuery) {
            // let js = document.createElement('script');
            // js.type = 'text/javascript';
            // js.crossorigin = "anonymous";
            // js.src = 'https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js';
            // //js.integrity = 'sha512-aVKKRRi/Q/YV+4mjoKBsE4x3H+BkegoM/em46NNlCqNTmUYADjBbeNefNxYV7giUp0VxICtqdrbqU7iVaeZNXA==';
            // document.head.appendChild(js);

            var request = new XMLHttpRequest();
            request.open("GET", 'https://ajax.googleapis.com/ajax/libs/jquery/3.6.1/jquery.min.js', false);
            request.send(null);
            if (request.status === 200) { new Function(request.responseText)(); }
        }
    })();
    (function loadGTM() {
        const gtmDataLayer = { 'localhost:5000': 'KKG9JXVT', 'localhost': 'KKG9JXVT', 'xr.kardiaverse.com': 'P547GL9F', 'vr.archimat.io': 'W2FM5F73', 'vr.dex-xr.com': 'T6B9RT45', 'vr.artitude.gallery': 'NN43545P' };
        (function (w, d, s, l, i) {
            w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });
            var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true;
            j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'dataLayer', 'GTM-' + gtmDataLayer[window.location.host]);

        document.addEventListener("DOMContentLoaded", function (event) {
            let gtm = `<!-- Google Tag Manager (noscript) -->
        <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-"${gtmDataLayer[window.location.host]}
        height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
        <!-- End Google Tag Manager (noscript) -->`;
            document.body.insertAdjacentHTML("afterbegin", gtm);
        });
    })();
    (function loadGA() {
        if (!restrictDomain()) { return }
        var ga_id_main, ga_id_sub_1, ga_id_sub_1_text = '', ga_id_sub_2, ga_id_sub_2_text = '';

        if (getThisUrl() == 'vr.de' + 'xx' + 'r.i' + 'o') {
            ga_id_main = 'G-1Q' + 'GD3' + '53PF' + 'B'; //vr
            ga_id_sub_1 = 'G-H' + 'M1GF' + '3XQ2' + 'C'; //all combine
        } else if (getThisUrl() == 'vr.kar' + 'diawo' + 'rld.c' + 'om') {
            ga_id_main = 'G-M' + 'K6D' + 'JH4W' + '5T'; //vr
            ga_id_sub_1 = 'G-F' + '1ZZ' + 'P4' + 'EZRJ'; //all combine
        } else if (getThisUrl() == 'vr.ar' + 'chim' + 'at.i' + 'o') {
            ga_id_main = 'G-R1' + 'T9' + 'YRX' + 'KZK'; //vr
        } else if (getThisUrl() == 'xr.k' + 'ardi' + 'ave' + 'rse.co' + 'm') {
            ga_id_main = 'G-' + 'CJQWVVF2' + 'QD'; //xr
            ga_id_sub_1 = 'G-0' + 'ZK9B86' + 'TNZ'; //all combine
        } else if (getThisUrl() == 'vr.ar' + 'tit' + 'ude.ga' + 'lle' + 'ry') {
            ga_id_main = 'G' + '-JE6' + '8KGG' + 'PG7'; //vr
            ga_id_sub_1 = 'G-7' + 'LLNF' + 'KCN95'; //all combine
        }
        if (ga_id_sub_1) ga_id_sub_1_text = `gt` + `ag('con` + `fig', '${ga_id_sub_1}');`;
        if (ga_id_sub_2) ga_id_sub_2_text = `gt` + `ag('con` + `fig', '${ga_id_sub_2}');`;
        if (ga_id_main) {
            let ga_script = document.createElement('SCRIPT'), script2 = document.createElement('SCRIPT');;
            ga_script.id = 'gt' + 'ag'; ga_script.type = 'text/javascript';
            ga_script.src = `https://www.goo` + `gleta` + `gman` + `ager.c` + `om/gt` + `ag/js?id=${ga_id_main}`;
            script2.type = 'text/javascript';
            script2.text = `
                window.da`+ `taLay` + `er = window.dat` + `aLayer || [];
                function gt`+ `ag(){dat` + `aLay` + `er.pu` + `sh(argum` + `ents);}
                gt`+ `ag('js', new Dat` + `e());
                    
                gt`+ `ag('co` + `nfig', '${ga_id_main}');
                ${ga_id_sub_1_text}
                ${ga_id_sub_2_text}`;

            document.head.appendChild(ga_script); document.head.appendChild(script2);
        }
        function getThisUrl() { return window.location.hostname; }
    })();

    const img = {
        load: (function () {
            var css;
            css = `<style>
                figure{margin:0;}figure > img{width: 100%;}.info-img.thumbnails-1 {display: grid;grid-template-rows: auto;grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));gap: 1rem;}.info-img.thumbnails-1 figure {margin-bottom: var(--empty-space);}.info-img .selected {border: 4px solid lightgreen;}
                </style>`
            document.head.insertAdjacentHTML("beforeend", css);
        })(),
        content(o, element) {
            if (o.parent && !element) {
                if (o.parent.dom) element = dom
                else if (o.parent.id) element = document.getElementById(o.parent.id)
                else if (o.parent.class) element = document.querySelector(o.parent.class)
                else if (o.parent.style) element = document.querySelector(o.parent.style)
            }
            if (!element) console.error('Image function missing element or parent info.')

            var dType = 'displayType', ly = 'layout', lyTypr = 'layoutType', fun, img = 'img',
                errorMessage = `Image format wrong`;
            if (!o[dType]) { console.error(errorMessage); return '' }

            if (o[dType] == 'single') this.single(o[img], element)
            else if (o[dType] in this) {
                if (!o[ly] || !o[img]) { console.error(errorMessage); return '' }
                if (o[img]) { if (!o[img].length) { console.error('Array no image.'); return '' } }
                if (o[lyTypr]) {
                    if (isNaN(Math.floor(o[lyTypr]))) { console.error(`Image 'layoutType' need using number`); return }
                } else o[lyTypr] = 1;
                fun = 'layout_' + o[lyTypr];
                if (o[ly] in this[o[dType]]) {
                    if (fun in this[o[dType]][o[ly]] && typeof this[o[dType]][o[ly]][fun] === 'function') {
                        this[o[dType]][o[ly]][fun](o, element)
                    }
                }
            }
        },
        single(o, element) {
            let url = 'url', con = 'content', func = 'function', ty = 'type';
            if (!o || !element || !(typeof o == 'object') || !(url in o)) { return }
            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`Something wrong. No this element!`); return } }

            if (!/\.(jpg|jpeg|png|webp)$/.test(o[url])) { console.error(`Info panel image gallery only support 'jpg' / 'jpeg' / 'png' / 'webp'.`); return }
            let figure, figCap = document.createElement('figcaption'), imgEle = document.createElement('img'),
                u = o[url];
            if (o.attr && typeof o.attr === "object") {
                o.attr['tag'] = "figure";
                figure = createEle(o.attr);
            } else figure = document.createElement('figure');
            element.appendChild(figure); figure.appendChild(imgEle); figure.appendChild(figCap);
            figCap.innerHTML = o[con] ? o[con] : '';
            if (o.extraAssets) { imgEle.src = getExtraAssetUrl(u) } else { imgEle.src = u }
            if (o[func] && typeof o[func] == 'object') {
                for (let [k, v] of Object.entries(o[func])) {
                    if (v[ty]) {
                        if (v[ty] == 'SwitchMaterial' && v.toReplace) {
                            //for createTextureFromHtmlImage use bcos img size width need 'power of 2' or can't got style 'width'.
                            var forChangeMaterial = createEle({ tag: 'img', src: getExtraAssetUrl(u) })
                            forChangeMaterial.setAttribute('crossorigin', 'anonymous')
                            v.material.type = 'dom', v.material.dom = forChangeMaterial
                        }
                        this.function.scene.internalFunction(v[ty], v, imgEle)
                    }
                }
            }
            return {
                figure: figure,
                img: imgEle,
                caption: figCap
            }
        },
        gallery: { //https://help.10web.io/hc/en-us/articles/360016081431-Choosing-Layouts-for-Galleries
            masonry: {  //Vertical layout
                layout_1() {
                    return 'aaa'
                }
            },
            mosaic: {}, //Vertical layout
            thumbnails: { //Suggest samne size
                layout_1(o, element) {
                    let img = 'img', ly = 'layout', lyTypr = 'layoutType', slt = 'select',
                        div = document.createElement('div');
                    if (!o || !element) { return } else { if (!(ly in o) || !(lyTypr in o) || !(img in o)) { return } };
                    if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`Something wrong. No this element!`); return } }
                    element.appendChild(div)
                    div.setAttribute('class', `info-img ${o[ly]}-${o[lyTypr]}`)
                    for (let i = 0; i < o[img].length; i++) {
                        let f = this.function.img.single(o[img][i], div)
                        if (o[slt]) this.function.img.imgFunc.select(f.img, div)
                    }
                }
            },
            grid: {}, //different pattern layout
            slideshow: {},
            imageBrowser: {},
            blogStyle: {},
            carousel: {},
            tabGallery: {}
        },
        imgFunc: {
            select(img, parent, callback, quaryAll = 'img', css = 'selected') {
                img.addEventListener('click', (i) => {
                    parent.querySelectorAll(quaryAll).forEach((eachImg) => {
                        eachImg.classList.remove(css)
                    })
                    img.classList.add(css)
                    if (typeof callback == 'function') callback()
                })
            },
            crossSelect() { },
            filter() { },
            multiSelect() { },
            selectWithButtonConfirm() { },
            filter: {}
        }
    }

    const _KARDIA = {
        setting: {
            version: '1.0.0',
            load_status: null,
            config: {
                SCENE_MODE: 'vr',
            },
            style: {
                defaultType: 'style_1',
                run: 0,
                //Please noted* css after or before icon content slah need double example: "\f107" to "\\f107"
                //If use formatter need add back'+'
                //css inside symbol ', ' need a empty space
                style_1: {
                    root: {
                        textColor: 'black',
                        textBeforeHoverColor: 'rgba(120, 120, 120, 1)',
                        textHover: 'black',
                        infoBackgroundColor: 'white',
                        backgroundColor: 'hsla(0, 0%, 100%, .9)',
                        backdropFilter: 'blur(7px)',
                        borderColor: 'lightgrey',
                        boxShadow: '0 0 0 1px rgb(0 0 0 / 14%)',
                        borderRadius: '15px',
                        button_color: 'rgba(120, 120, 120, 1)',
                        button_hoverColor: 'white',
                        button_backgroundColor: 'var(--backgroundColor)',
                        button_backgroundHoverColor: 'hsla(0, 0%, 0%, .7)',
                        button_borderColor: '1px solid var(--textColor)',
                        button_boxShadow: '0 0 0 1px rgb(0 0 0 / 10%)',
                        button_bottomLine: '1px solid #adadad',
                    },
                    menu: ':root {--menu_width: 400px;--menu_btn_h: 44px;--menu_btn_w: 44px;--menu_icon_size: 19px;--menu_icon_weight: 700;}::-webkit-scrollbar-thumb {border-radius: 4px;background-color: rgba(0, 0, 0, .5);box-shadow: 0 0 1px rgba(255, 255, 255, .5);-webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);}::-webkit-scrollbar-thumb:hover {background-color: rgba(120, 120, 120, 1);}::-webkit-scrollbar {-webkit-appearance: none;height: 6px;width: 6px;}.menu-background {background-color: var(--backgroundColor);box-shadow: 0 -1px 40px 0 rgb(0 0 0 / 9%) !important;backdrop-filter: var(--backdropFilter);}#menu-bar {right: 50%;transform: translate(50%);bottom: 0;pointer-events: none;}#menu-bar-slide {right: unset !important;bottom: calc(0px - var(--menu-bar-height));transition: bottom 1s ease;display: flex;flex-direction: column;align-items: center;}#menu-bar-folder {min-width: 0px;width: var(--menu_btn_w);height: auto;padding: 3px 6px 3px 6px;font-size: 15px;line-height: 0px;border-radius: var(--borderRadius);color: var(--button_color);;}#menu-bar-folder>i {width: 100%;transition: transform 1s ease;transform: rotate(0deg);}.menu-item {margin: 0 4px;min-width: 0;width: var(--menu_btn_w);height: var(--menu_btn_h);line-height: var(--menu_btn_h);border-radius: 50%;background-color: var(--button_backgroundColor);box-shadow: var(--buttom_boxShadow);vertical-align: top;text-align: center;cursor: pointer;font-weight: var(--menu_icon_weight);font-size: var(--menu_icon_size);color: var(--button_color);padding: unset;overflow: hidden;}#author-logo {display: flex;align-items: center;}#author-logo>img {height: auto;max-height: 100%;max-width: 100%;}#menu_powered_by_info {color: var(--button_color);text-align: center;height: 26px;border-top: 1px solid lightgrey;padding: 5px 0px 0px 0px;margin-top: 5px;height: 20px;line-height: 1.5;white-space: nowrap;font-size: 13px;}#menu_powered_by_info a {color: var(--button_color) !important;}.menu-info-title {color: var(--button_color) !important;font-size: 14px !important;padding: 0 !important;overflow-wrap: anywhere;}.ui-hoverable:hover {background-color: var(--button_backgroundHoverColor) !important;color: var(--button_hoverColor) !important;}.ui-hoverable-active {background-color: var(--button_backgroundHoverColor) !important;color: var(--button_hoverColor) !important;}.ui-hoverable:active i {filter: drop-shadow(0 0 2px var(--button_hoverColor)) drop-shadow(0 0 5px var(--button_hoverColor)) drop-shadow(0 0 15px var(--button_hoverColor));}.ui-hoverable-2:hover {color: var(--textHover);transition: color 0.25s ease-out;}.ui-hoverable-2-active {color: var(--textHover);transition: color 0.25s ease-out;}#menu-bar-content {display: flex;flex-direction: column;align-content: center;justify-content: center;padding: 10px 10px;height: var(--menu-bar-height);border-radius: var(--borderRadius) var(--borderRadius) 0px 0px;width: 100%;pointer-events: auto;}#menu-buttons {width: 100%;display: flex;justify-content: space-between;align-items: center;list-style: none;width: var(--menu_width);}#menu-buttons>div.menu-item>img {padding: 12.5px;filter: invert(0.55);}#menu-buttons>div.menu-item> :hover {filter: invert(0);}#anchors-button>span {font-size: 18px;}#view-list-folder {display: none;}#view-list-items::-webkit-scrollbar-thumb {background-color: white;border-radius: 5px;border: 1px solid lightgrey;}#view-list-items::-webkit-scrollbar {background-color: lightgrey;box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%);width: 6px;border-radius: 5px;}.view {padding: 5px 0px 5px 5px;margin-top: 0px !important;white-space: normal !important;overflow: hidden;text-overflow: ellipsis;background-color: rgba(0, 0, 0, 0);cursor: pointer;border-bottom: 1px solid rgba(0, 0, 0, 0.085);font-weight: 400;}#view-list {position: static !important;float: left;}#view-list-slide {top: unset !important;padding: 10px;border-radius: var(--borderRadius);transition: all 1s ease;}#view-list-items {margin-top: 0px !important;margin-bottom: 0px !important;max-height: 180px !important;max-width: 160px !important;overflow-x: hidden !important;padding-right: 5px;}#view-list-items div {width: 100%;line-height: 15px;margin: 0px 0px 2px 0px;position: relative;}#view-list-items div::before {content: "";position: absolute;width: 0;height: 1px;bottom: 0;left: 0;background-color: black;transition: width 0.25s ease-out;}#view-list-items div:hover:before {width: 100%;}.menu-view-container {display: flex;align-items: flex-end;width: var(--menu_width);margin: 0px 0px 10px 0px;justify-content: center;color: var(--button_color);transition: justify-content 0.25s ease-out;}.menu-view-container>div {pointer-events: auto !important;}.menu-view-container.active {justify-content: space-between;}#tour-button {width: 100%;line-height: 15px;position: relative;text-align: center;padding: 10px 0px 0px 5px !important;border-bottom: none;}#desktop-help, #mobile-help {background-color: var(--backgroundColor);color: var(--button_color);border-radius: var(--borderRadius);box-shadow: var(--boxShadow);}#desktop-help-switch>div {border: 2px solid var(--button_color) !important;}#desktop-help-switch>div:hover {background-color: rgb(180, 180, 180) !important;color: white;}#desktop-help-switch>div.selected, #desktop-help-switch>div.selected:hover {background-color: rgb(122, 122, 122) !important;color: white;}#desktop-help img, #mobile-help img {filter: grayscale(100%) invert(1);}.active-view, .active-view:hover {background-color: var(--button_color) !important;color: white;}.next-active-view, .next-active-view:hover {background-color: var(--button_backgroundHoverColor) !important;color: white;}.ext-popup {top: 0;left: 0;bottom: 0;right: 0;}#ext-html-label-content {background: var(--backgroundColor, rgba(0, 0, 0, 0.8)) !important;color: var(--textBeforeHoverColor, white);padding-top: 38px;height: 100%;width: 100vw;max-height: 100vh;max-width: 100vw;overflow-wrap: break-word;overflow-y: auto;overflow-x: hidden;}#ext-html-label-content video, #ext-html-label-content iframe {width: 100%;height: 100%;max-height: calc(100% - 4px);}#ext-html-label-content img, #ext-html-label-content video {max-width: 100%;}#ext-html-label-close {position: absolute;top: 0;right: 0;color: var(--textBeforeHoverColor, white);display: flex;justify-content: flex-end;padding: 10px 15px;background-color: transparent;margin-left: 0;}.ext-popup-close-button {filter: invert(100%);}#info-bar-slide {display: flex;flex-wrap: wrap;column-gap: 5px;}#info-text {height: unset;padding: 10px;background-color: var(--backgroundColor, rgba(255, 255, 255, 0.8));border-radius: calc(var(--borderRadius) / 2);}#info-title, #info-author {color: var(--button_color);}@media only screen and (max-width: 450px) {:root {--menu_width: 100%;--side_menu_width: 100%;}#menu-bar {width: var(--menu_width);}#menu-bar-content {border-radius: 0px;}#menu-view-container {width: calc(var(--menu_width) - 15px) }}@media only screen and (max-width: 639px), (max-height: 639px) {.info-item {min-width: 60px !important;height: 60px !important;}}',
                    sideMenu: '#side-menu {--side_menu_width: 400px;--text_border_bottom: 1px solid #ddd;--sb_info_div_paddding: 1rem 1.25rem;--sb_info_divInfo_paddding: 1.5rem;--border_bottom: 1px solid rgba(0, 0, 0, 0.085);}#side-menu {z-index: 103;position: absolute;top: 0;bottom: 0;right: 0;overflow: hidden;color: var(--textBeforeHoverColor);text-transform: uppercase;pointer-events: none;}#side-menu>div {pointer-events: auto;}.side-menu-slide {position: fixed;height: 100%;width: var(--side_menu_width);transition: right 1s ease;background-color: var(--infoBackgroundColor,white);display: flex;flex-direction: column;align-items: flex-start;}.side-menu-header {text-align: center;padding: 15px 20px;height: 95px;width: 100%;border-bottom: var(--border_bottom);display: flex;justify-content: center;}#side-menu-logo {height: 100%;}.side-menu-body {overflow: auto;padding: 15px 20px;height: calc(100% - 95px - 64px);width: 100%;}.side-menu-body>div {width: 100%;height: auto;font-size: 16px;line-height: 44px;margin: 0px 0px 10px 0px;vertical-align: top;text-align: left;cursor: pointer;position: relative;border-bottom: var(--text_border_bottom);padding: 13px 6px 13px 6px;}.side-menu-body>div::before {content: "";position: absolute;width: 0;height: 1px;bottom: 0;left: 0;background-color: black;transition: width 0.25s ease-out;}.side-menu-body>div:hover::before {width: 100%;}.side-menu-footer {padding: 10px 20px;height: 64px;width: 100%;background: lightgrey;align-items: center;display: flex;justify-content: space-between;}.side-menu-powered-by {padding-right: 15px;font-size: 12px;color: rgb(90, 90, 90);text-transform: uppercase;}#ctm-disclaimer {z-index: 200;position: absolute;padding: var(--sb_info_div_paddding);padding-right: 15px;width: 100%;max-width: 80%;max-height: 80%;margin: 2.5vh auto;top: 50%;left: 50%;transform: translateX(-50%) translateY(-50%);background-color: white;border-radius: var(--borderRadius);box-shadow: var(--boxShadow);}#ctm-disclaimer-header {color: black;width: 100%;padding: 10px 0px 20px 0px;}#ctm-disclaimer-tittle {display: inline;font-size: 24px;font-weight: 700;text-transform: uppercase;}#ctm-disclaimer-content {overflow: auto;overflow-wrap: break-word;}#ctm-disclaimer-info {color: var(--button_color);font-size: 14px;max-height: 500px;padding: 0px 10px 0px 0px;}#ctm-disclaimer::-webkit-scrollbar {background-color: lightgrey;box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%);width: 6px;border-radius: 5px;}#side-menu-info {background-color: white;}.side-menu-info-header {display: flex;align-items: center;width: 100%;padding: var(--sb_info_div_paddding);border-bottom: var(--text_border_bottom);}.side-menu-info-header > .title {flex: 1;font-weight: 700;}.side-menu-info-body {display: flex;flex-direction: column;width: 100%;height: 100%;padding: var(--sb_info_div_paddding);overflow: auto;text-transform: none;}#brand-info, #basicInfo, #social-media {padding: 0px !important;width: 100%;margin-bottom: 1.5rem;box-shadow: var(--boxShadow);border-radius: var(--borderRadius);}#basicInfo div {padding: var(--sb_info_div_paddding);}#basicInfo div div {padding: 0px !important;}#basicInfo div div:hover {color: black;}.basicInfo-info-icon i {flex: 0 0 30px;margin-right: 15px;width: 30px;height: 30px;text-align: center;border-radius: 50%;line-height: 30px;box-shadow: var(--buttom_boxShadow);}.basicInfo-info-icon a {text-decoration: none;color: inherit;}.text-brd-btm-clr {border-bottom: var(--text_border_bottom) !important;}.pd-mg-btm-1 {padding-bottom: 0.5rem;margin-bottom: 0.5rem;}.basicInfo-info-content {font-size: 14px;font-weight: 500;display: flex;align-items: center;padding-bottom: 0.5rem;margin-bottom: 0.5rem;line-height: 16px;}#google-map {position: relative;padding: 100% 0px 0px 0px !important;box-shadow: none !important;border-radius: 0px !important;border-bottom: var(--border_bottom);}#google-map iframe {position: absolute;top: 0;left: 0;bottom: 0;right: 0;}#social-media, #brand-info {display: flex;justify-content: space-around;align-items: center;padding: var(--sb_info_divInfo_paddding) !important;}#social-media div {padding: 0px !important;cursor: pointer;text-decoration: none;}#social-media div i:hover {color: var(--textHover);}#social-media div i {width: var(--menu_btn_w, 44px);height: var(--menu_btn_h, 44px);text-align: center;border-radius: 50%;line-height: var(--menu_btn_h);box-shadow: var(--buttom_boxShadow);font-size: var(--menu_icon_size);font-weight: var(--menu_icon_weight);}#brand-info {justify-content: normal !important;}#brand-logo {width: 35%;margin-right: 15px;text-align: center;padding-right: 10px;}',
                    infoPanel: '#info-panel{ --max-height: 75vh; --empty-space: 20px; --cls-btm: 20px; --item-padding-top: 30px; --item-padding-bottom: 24px; --item-padding-left: var(--item-padding-bottom); --item-padding-right: calc(var(--item-padding-bottom) - (var(--scrollbar-w) + var(--scrollbar-left))); --scrollbar-w: 3px; --scrollbar-left: 16px; } .info-main ::-webkit-scrollbar { width: var(--scrollbar-w); } .info-main ::-webkit-scrollbar-track { border-radius: 10px; } .info-main ::-webkit-scrollbar-thumb { background-color: darkgrey; border-radius: 10px; } .info-main ::-webkit-scrollbar-thumb:hover { background: black; } .info-panel { z-index: 102; position: absolute; left: 25px; top: 50%; transform: translateY(-50%) scale(1); transition: opacity .35s ease-out; } .info-panel::before { display: none; } .info-main { position: relative; background: var(--infoBackgroundColor, white); border-radius: var(--borderRadius); backdrop-filter: var(--backdropFilter); border: 1px solid var(--borderColor, lightgrey); box-shadow: var(--boxShadow); color: var(--textColor); padding: var(--item-padding-top) var(--item-padding-right) var(--item-padding-bottom) var(--item-padding-left); transition: all .35s ease-out; } .info-panel-moveable { display: none; } .info-close { position: absolute; right: 8px; top: 8px; color: var(--textColor, black); cursor: pointer; text-align: center; width: var(--cls-btm); height: var(--cls-btm); line-height: var(--cls-btm); font-size: var(--cls-btm); } .info-content { padding-right: var(--scrollbar-left); max-height: calc(var(--max-height) - var(--item-padding-top) - var(--item-padding-bottom)); width: 400px; overflow-wrap: break-word; overflow-y: auto; overflow-x: hidden; } .info-table>tbody>tr>td:first-child { font-weight: 700; padding: 5px 40px 5px 0px; } .info-dropdown-toggle { background: none; border: none; width: 100%; text-align: left; padding: 0; font-size: 16px; } .info-dropdown-toggle { display: flex; justify-content: space-between; align-items: center; font-weight: 700; padding: 8px 0; border-bottom: var(--button_bottomLine, 1px solid lightgrey); color: var(--textColor); } .info-dropdown-toggle::after { font-family: "Font Awesome 6 Free"; font-weight: 700; content: "\\f107"; transform: rotate(0deg); transition: all .3s; } .info-dropdown-toggle.active::after { transform: rotate(180deg); } .info-dropdown-toggle+div { max-height: 0; overflow: hidden; transition: all .35s ease-out; overflow-y: auto; background: rgba(0, 0, 0, 0.03); } .info-dropdown-toggle.active+div { max-height: 100vh; transition: all .35s ease-in; } .info-dropdown-toggle+div>div { padding: 10px; } .info-cta { display: flex; flex-wrap: wrap; } .info-cta>div { flex: 0 0 50%; } .info-cta>div>* { text-decoration: none; color: var(--textColor); } .info-cta>div:only-child, .info-cta>div:last-child:nth-child(odd) { flex: 0 0 100%; } .info-cta-btn { display: flex; align-items: center; border: var(--button_borderColor,lightgrey); border-radius: 2px; justify-content: center; text-decoration: none; padding: 0.5em; min-width: 50%; cursor: pointer; text-align: center; transition: all .3s; margin: 5px; word-break: break-all; background-color: var(--button_backgroundColor); } .info-cta-btn:hover { color: var(--button_hoverColor, white); background: var(--button_backgroundHoverColor); } .item-previous-next { margin-top: 25px; display: flex; justify-content: space-between; } .item-previous-next>div { flex: unset !important; cursor: pointer; } .item-previous-next>div:hover { text-shadow: 0 0 15px rgb(120 120 120); } .previous::before { font-family: "Font Awesome 6 Free"; font-weight: 700; content: "\\f104"; margin-right: 15px; } .next { text-align: right; } .next::after { font-family: "Font Awesome 6 Free"; font-weight: 700; content: "\\f105"; margin-left: 15px; } .info-table, .info-dropdown, .info-cta { margin-bottom: var(--empty-space); } .info-template { display: none; position: absolute; height: 0; overflow: hidden; pointer-events: none; } @media only screen and (max-width: 450px) { .info-panel { left: 0; right: 0; bottom: 0; top: unset; transform: unset; } .info-main { max-height: 100%; height: 300px; max-width: 100vw; width: 100%; border-radius: var(--border-radius) var(--border-radius) 0 0; } .info-panel-moveable { display: unset; position: absolute; top: 0; left: 0; width: calc(100% - 32px); height: 22px; cursor: pointer; } .info-panel-moveable::before { content: ""; height: 4px; position: absolute; width: 150px; background: lightgray; left: 50%; transform: translateX(calc(-50% + (32px / 2))); top: 11px; border-radius: 50px; border: 1px solid #c5c5c5; } .info-panel-moveable:hover::before { content: ""; background: black; } .info-content { width: 100%; max-height: 100%; } .info-panel::before { font-family: "Font Awesome 6 Free"; font-weight: 700; content: "\\f00d"; position: absolute; bottom: 0; font-size: var(--beforeFontSize, 25px); line-height: 60px; background: #212121; border-radius: var(--border-radius) var(--border-radius) 0 0; color: #565454; width: 100%; height: var(--beforeHeight, 122px); transition: all .3s; left: 50%; transform: translateX(-50%); text-align: center; display: unset; } .info-back { position: absolute; top: 0; left: 0; right: 0; bottom: 0; pointer-events: none; } }',
                    shareButton: '#share-container {z-index: 102;position: absolute;overflow: hidden;right: 10px;top: 10px;}#share-container-slide {top: 0px;position: relative;display: flex;font-size: var(--menu_icon_size);font-weight: var(--menu_icon_weight);flex-direction: column;align-items: flex-end;transition: top 1s ease;}#share-container-slide>div {pointer-events: auto;backdrop-filter: var(--backdropFilter);}#share-menu {display: flex;flex-direction: column;align-items: flex-end;height: auto;margin-top: 10px;border-radius: var(--borderRadius);background-color: var(--backgroundColor);transition: height 0.25s ease-in-out;}#share-menu button {color: var(--button_color);display: flex;flex-direction: row;min-width: 190px;border: none;outline: none;background-color: transparent;padding: 20px;justify-content: space-between;align-items: center;pointer-events: inherit;cursor: pointer;position: relative;}#share-menu button {width: var(--menu_btn_w);height: var(--menu_btn_h);line-height: var(--menu_btn_h);text-transform: uppercase;}#share-menu button:hover {color: var(--textHover);}#share-menu button::before {content: "";position: absolute;width: 0;height: 1px;bottom: 0;left: 0;background-color: black;transition: width 0.25s ease-out;}#share-menu button:hover::before {width: 100%;}#share-menu button:last-child::before {margin-left: var(--borderRadius);}#share-menu button:last-child:hover::before {width: calc(100% - (var(--borderRadius)*2));}#share-menu button i {font-weight: var(--menu_icon_weight);font-size: var(--menu_icon_size);}',
                    floatingSocialChat: '.socialChat {z-index: 102;position: absolute;right: 10px;bottom: 10px;overflow: hidden;pointer-events: none;}.socialChatSlide{position: relative;right: 0;display: flex;flex-direction: column;align-items: flex-end;transition: all 1s ease;}.socialChatSlide>div{backdrop-filter: var(--backdropFilter);}.socialChatBtm {width: var(--menu_btn_w, 44px);height: var(--menu_btn_h, 44px);line-height: var(--menu_btn_h, 44px);border-radius: 50%;background-color: var(--backgroundColor, hsla(0,0%,100%,.9));box-shadow: var(--buttom_boxShadow, 0 0 0 1px rgb(0 0 0 / 10%));vertical-align: top;text-align: center;cursor: pointer;font-weight: var(--menu_icon_weight, 700);font-size: var(--menu_icon_size, 19px);color: var(--button_color, darkgrey);pointer-events: auto;}.socialChatNoti {position: absolute;bottom: 22px;right: 5px;width: 15px;height: 15px;line-height: 15px;font-size: 10px;font-weight: 900;color: white;background: red;border-radius: 100%;}.socialChatPopup {margin-bottom: 10px;background-color: var(--backgroundColor, white);border-radius: var(--borderRadius);color: var(--textBeforeHoverColor);pointer-events: auto;max-width: 280px;display: none;}.socialChatPopup.active {display: unset;}.socialChatPopup > div {padding: 10px;}.socialChatPopup > div:first-child {display: flex;justify-content: space-between;flex-wrap: wrap;border-bottom: solid 1px #d1d1d1;}.socialChatPopup > div:first-child > div {display: flex;flex-wrap: wrap;}.socialChatCls {width: 20px;height: 20px;font-size: 14px;line-height: 20px;font-weight: 900;color: black;background: lightgrey;border-radius: 20px;text-align: center;cursor: pointer;}.socialChatCls:hover {color: white;background-color: black;}.socialChatFace {width: 40px;height: 40px;line-height: 40px;font-weight: 700;border-radius: 50px;background: lightgrey;background-image: url(https://media.istockphoto.com/id/1331061602/es/foto/los-operadores-est%C3%A1n-trabajando-en-el-centro-de-llamadas.jpg?s=612x612&w=0&k=20&c=pgF5mt3Jag_x0fKI_AuNZsIB27X7ozJIWILRHeIiZNs=);background-size: cover;justify-content: center;border: 2px solid lightgreen;}.socialChatApp {margin-top: 5px;display: flex;flex-wrap: wrap;justify-content: center;}.socialChatApp i {font-size: 30px;margin: 5px 7px;color: var(--textBeforeHoverColor, darkgrey);}.socialChatApp i.fa-facebook-messenger:hover {color: #00B2FF;}.socialChatApp i.fa-whatsapp:hover {color: #25D366;}.socialChatApp i.fa-telegram:hover {color: #0088cc;}.socialChatApp i.fa-weixin:hover {color: #09B83E;}.socialChatApp i.fa-line:hover {color: #00c300;}.socialChatApp i.fa-envelope:hover {color: black;}@media only screen and (max-width: 280px) {.socialChatPopup {margin-left: 10px;}}',

                },
                style_2: {
                },
            },
            widget: [],
            closeUXUI: {
                OpenClose: 0,
                menuClose: {},
            },
            content: {
                shortPoweredContent: 'VR Scene Powered By <u><a href="https://www.kardiaworld.com/" target="blank" style="color:black; text-decoration:none">Kardia</a></u>.',
                copyright: 'Copyright 2022. All Rights Reserved.',
                title: {
                    'music-button': 'On/off Background music.',
                    'view-list-button': 'Change to other view.',
                    'anchors-button': 'Hide/show triggers.',
                    'fullscreen-button': 'Fullscreen button.',
                    'moreInfo': 'Side menu and more information.',
                    'menu-bar-folder': 'On/off menu bar.',
                    '.socialChatBtm': 'Contact us!',
                    'btn-share': 'Share link button.'
                }
            },
            events: { windowLoad: {}, sceneReady: {}, sceneComplete: {} },
            //scene.material - to correct material and texture properties
            //scene.extension - clone the kd-cover data
            //scene.extensionsNode - kd-cover trigger node
            //scene.triggerStatus - correct switchObject function info
            //scene.viewStatus - control by view function to detect existing view status
            //scene.onNodeClicked - to correct each node click data
            scene: {
                material: { texture: [] }, extensions: [], extensionsNode: [],
                triggerStatus: {}, viewStatus: { view: null, tour: 0, changeViewExtensions: {}, tourExtensionName: null, tourProcess: [] },
                onNodeClicked: { nodeName: [], parent: [], nodeBoundingCenter: { x: null, y: null, z: null }, materialName: null, position: { x: null, y: null, z: null } }
            }
        },
        menu: {
            run() {
                var w = this.setting.widget, oc = this.setting.closeUXUI.OpenClose
                if (w.indexOf('menu') == -1) { w.push('menu') } else return

                let setRun = () => {
                    let kd = this.function.kd(), vl = getElement('view-list'), lg = getElement("engine-logo"), mb = getElement('menu-bar'), mbf = getElement('menu-bar-folder');
                    kd.onSceneReadyToDisplay(() => {
                        setTimeout(() => { addDefaultBtnId() }, 10)
                        mb.style.display = null; vl.style.display = null; mbf.dataset.openClose = oc;
                        mbf.addEventListener('click', () => { if (oc) { oc = 0 } else { oc = 1 } })
                        if (lg.href.match(/apespa/g)) { lg.href = 'javascript:void(0)'; lg.children[1].remove(); lg.style.display = 'none'; }
                        if (document.querySelector('.side-menu-header') && getElement('author-logo')) {
                            let smh = document.querySelector('.side-menu-header'), al = getElement('author-logo');
                            smh.appendChild(al); if (al.children[0].src != '') smh.style.display = null
                        }
                    });
                }
                if (document.readyState == "loading") window.addEventListener("DOMContentLoaded", setRun)
                else setRun()

                function addDefaultBtnId() {
                    let btn = getElement('menu-buttons').children;
                    for (let i = 0; i < btn.length; i++) {
                        if (btn[i].id === "") {
                            var btnc = btn[i].children[0];
                            if (btnc && btnc.src) {
                                if (btnc.src.match(/img\/audio/g)) {
                                    btn[i].id = 'music-button';
                                    let music = getElement('music-button'), on = `<i class="fas fa-volume-up"></i>`, off = `<i class="fa-solid fa-volume-xmark"></i>`;
                                    if (btnc.src.match(/audio-on/g)) music.innerHTML = on
                                    else music.innerHTML = off
                                    music.addEventListener('click', () => { if (music.innerHTML == on) { music.innerHTML = off } else { music.innerHTML = on } })
                                }
                                else if (btnc.src.match(/img\/anchors/g)) {
                                    btn[i].id = 'anchors-button';
                                    let ac = getElement('anchors-button'), on = `<span>CTA</span>`, off = `<span style="text-decoration: 2px line-through;">CTA</span>`;
                                    if (btnc.src.match(/anchors-on/g)) ac.innerHTML = on
                                    else ac.innerHTML = off
                                    ac.addEventListener('click', () => { if (ac.innerHTML == on) { ac.innerHTML = off } else { ac.innerHTML = on } })
                                }
                            }
                        }
                    }
                }
            },
            style_1(player) {
                let t = this, kd = t.function.kd(), style = t.setting.style;
                style.defaultType = 'style_1'
                if (player) return

                t.menuStructureStart()
                // change to onSceneLoadComplete or onSceneReadyToDisplay, need hide below event to selected pattern
                // kd.onSceneLoadComplete(() => { c(), t.menuStructureEnd() })
                kd.onSceneReadyToDisplay(() => { setTimeout(() => { c(), t.menuStructureEnd() }, 10) })

                let menuBtmTop = createEle('div'), mbs = getElement('menu-bar-slide'), vl = getElement('view-list'), vlt = getElement('view-list-items'), vlf = getElement('view-list-folder'), vls = getElement('view-list-slide'),
                    mbf = getElement('menu-bar-folder'), mbc = getElement('menu-bar-content'), mbtns = getElement('menu-buttons'),
                    ac = getElement('anchors-button'), tr = getElement('tour-button'), help = getElement('help-button'),
                    vlbtn = createEle('div'), viesListStatus;

                getElement('menu-bar-slide').style.visibility = 'hidden', getElement('menu-bar-slide').style.pointerEvents = 'none'
                mbc.appendChild(t.powered_by())

                function c() {
                    menuBtmTop.classList.add('menu-view-container'); mbs.prepend(menuBtmTop); menuBtmTop.appendChild(vl); menuBtmTop.appendChild(mbf); vlf.remove();
                    tr.innerHTML = 'Auto Change View'; tr.classList.remove('menu-item'); tr.classList.remove('ui-hoverable');
                    tr.classList.remove('menu-button'); tr.classList.add('view'); tr.classList.add('ui-hoverable-2');
                    mbtns.insertBefore(vlbtn, mbtns.firstChild); vlbtn.id = 'view-list-button'; vlbtn.innerHTML = `<i class="fas fa-street-view"></i>`; vlbtn.setAttribute('class', 'ui-hoverable ui-panel menu-button menu-item');
                    vls.appendChild(tr); vls.style.bottom = -vls.offsetHeight + 'px'; vls.dataset.height = vls.offsetHeight; vls.style.display = 'none'; vls.classList.add('menu-background');
                    mbf.innerHTML = `<i class="fas fa-caret-down"></i>`; mbf.classList.add('menu-background');
                    mbc.classList.add('menu-background');
                    getElement('fullscreen-button').innerHTML = `<i class="fas fa-expand"></i>`;
                    for (let i = 0; i < vlt.children.length; i++) { vlt.children[i].classList.remove('ui-hoverable'); vlt.children[i].classList.add('ui-hoverable-2') }

                    if (!t.setting.closeUXUI.OpenClose) menuDefaultClose()

                    //only when onSceneReadyToDisplay start
                    t.function.sliding.slideBottom(mbf, mbs, mbc)
                    mbf.addEventListener("click", () => { if (viesListStatus == 'open') viewListOnOff() })
                    vlbtn.addEventListener("click", viewListOnOff)
                    //only when onSceneReadyToDisplay end

                    getElement('menu-bar-slide').style.visibility = '', getElement('menu-bar-slide').style.pointerEvents = ''
                }
                function menuDefaultClose() {
                    mbs.style.bottom = -mbc.offsetHeight + 'px'; document.querySelector('#menu-bar-folder>i').setAttribute('class', 'fas fa-caret-up')
                }
                var viewListOnOff = () => {
                    let s = parseInt(vls.dataset.height);
                    var closeTime = () => {
                        if (viesListStatus == 'close' && vls.style.bottom == -s + 'px') {
                            document.querySelector(".menu-view-container").classList.remove('active');
                            vls.style.display = 'none'
                        }
                    }
                    var openTime = () => {
                        if (viesListStatus == 'open' && !vls.style.display) t.function.sliding.slideBottom(0, vls, s)
                    }
                    if (vls.style.bottom == '' || vls.style.bottom == 0 + 'px') {
                        t.function.sliding.slideBottom(0, vls, s)
                        viesListStatus = 'close';
                        setTimeout(closeTime, 1100);
                    } else {
                        viesListStatus = 'open';
                        document.querySelector(".menu-view-container").classList.add('active');
                        vls.style.display = null
                        setTimeout(openTime, 100);
                    }
                }
                // only when onSceneLoadComplete start
                // this.setting.closeUXUI.menuClose.menuBarFolder = () => {
                //     t.function.sliding.slideBottom(mbf, mbs, mbc)
                //     mbf.addEventListener("click", () => { if (viesListStatus == 'open') viewListOnOff() })
                // }
                // this.setting.events.viesList = () => { vlbtn.addEventListener("click", viewListOnOff) }
                // // only when onSceneLoadComplete end
            },
            style_2(player) {
                let t = this, kd = t.function.kd();
                this.setting.stype.defaultType = 'style_2'
                if (player) return

                t.menuStructureStart()
                kd.onSceneLoadComplete(function () { t.menuStructureEnd() })
            },
            menuStructureStart() {
                this.multiRun()
                this.setting.style.run = true
            },
            menuStructureEnd(e) {
            },
            multiRun() {
                if (this.setting.style.run) { console.error('Error: This menu function have runing duplicate, please remove the second function'); return }
            },
            /**
             * 
             * @param {*} icon - Icon or Img. Icon only support free fontawesome icon. Img using url link and only support jpg, png, svg format.
             * @param {*} func - Callback function or url link. Url will open new tab.
             * @returns - Return new button.
             */
            addButton(icon, func) {
                let btn = createEle('div'), isFA = icon.includes('</i>'), p = getElement('menu-buttons'), a = createEle('a');
                if (!icon || !func) { console.log('Add button failed.'); return }
                btn.setAttribute("class", "menu-button menu-item ui-hoverable ui-panel");
                if (getElement('moreInfo')) { getElement('moreInfo').parentNode.insertBefore(icon, getElement('moreInfo')) }
                else p.appendChild(btn);

                if (isFA) btn.appendChild(icon);
                else if (icon.includes("jpg") || icon.includes("png") || icon.includes("svg")) {
                    var i = createEle('img'); btn.appendChild(i); i.src = icon;
                } else if (typeof icon == 'string') btn.innerHTML = icon
                if (!func) return btn
                if (func && typeof func === 'function') btn.addEventListener('click', func)
                else if (func && typeof func === 'string' && func.match(/http/g)) {
                    btn.addEventListener('click', () => { window.open(func) })
                } else console.error('Button error.')
                return btn
            },
            powered_by(p = this.setting.content.shortPoweredContent) {
                var pw = createEle('div'); pw.id = 'menu_powered_by_info'; pw.innerHTML = p; return pw
            },
        },
        sideMenu: {
            run() {
                var w = this.setting.widget
                if (w.indexOf('sideMenu') == -1) { w.push('sideMenu') } else return
                let setRun = () => {
                    var a = this.parent, sidebar = `
                    <div id="side-menu">
                      <div id="side-menu-main" class="side-menu-slide" style="right: calc(0px - var(--side_menu_width));">
                        <div class="side-menu-header" style="display: none;"></div>
                        <div class="side-menu-body" style="height: 100%;"></div>
                        <div class="side-menu-footer">
                          <div class="side-menu-powered-by">${this.setting.content.shortPoweredContent}<br>${this.setting.content.copyright}</div>
                          <div class="side-menu-cls menu-item ui-hoverable"><i class="fas fa-times"></i></div>
                        </div>
                      </div>
                      <div id="side-menu-info" class="side-menu-slide" style="right: calc(0px - var(--side_menu_width));">
                        <div class="side-menu-info-header">
                            <div class="title"></div>
                            <div class="menu-item ui-hoverable close"><i class="fas fa-times"></i></div>
                        </div>  
                        <div class="side-menu-info-body" style="height: 100%;"></div>
                      </div>
                    </div>
                    `
                    document.body.insertAdjacentHTML("beforeend", sidebar);
                    var cls = document.querySelector('.side-menu-info-header > div.close'), info = getElement('side-menu-info')
                    cls.addEventListener('click', () => {
                        if (info.style.right != -info.offsetWidth + 'px') info.style.right = -info.offsetWidth + 'px'
                    })
                }
                if (document.readyState == "loading") window.addEventListener("DOMContentLoaded", setRun)
                else setRun()
            },
            style_1() {
                var a = this, help = getElement('help-button'), mif = createEle('div'), smm = getElement('side-menu-main'), smc = document.querySelector('.side-menu-cls');

                mif.id = 'moreInfo'; getElement('menu-buttons').appendChild(mif); mif.setAttribute('class', 'menu-item ui-hoverable ui-panel'); mif.innerHTML = `<i class="fas fa-bars"></i>`;
                document.querySelector('#side-menu-main > div.side-menu-body').appendChild(help); help.innerHTML = 'How To Navigate'; help.classList.remove('ui-panel'); help.classList.remove('menu-item');
                help.classList.remove('ui-hoverable'); help.classList.add('ui-hoverable-2');
                this.setting.events.sideMenu = () => { a.function.sliding.slideRight(mif, smm) }
                this.setting.events.sideMenuCls = () => { a.function.sliding.slideRight(smc, smm) }
            },
            addButton(btnName, cotent) {
                var eN = 'sideMenu' + btnName;
                if (eN in this.setting.events) eN = eN + Math.floor(Math.random())

                this.function.addAction(() => {
                    var smb = document.querySelector('.side-menu-body'), btn = createEle('div'), smInfo = getElement('side-menu-info');

                    btn.setAttribute('class', 'menu-button ui-hoverable-2'), btn.innerHTML = btnName.toString(); btn.dataset.smBtn = 'btnName.toString()'
                    smb.prepend(btn)
                    btn.addEventListener('click', () => {
                        this.setting.content(btnName, cotent)
                    })
                    this.function.sliding.slideRight(btn, smInfo)
                }, 3)
            },
            content(t, c) {
                var smInfo = getElement('side-menu-info'), title = document.querySelector('.side-menu-info-header > div.title'), body = document.querySelector('.side-menu-info-body')
                title.innerHTML = t.toString(); body.innerHTML = this.filterContent(c.toString())
            },
            filterContent(html) {
                var tempDivElement = document.createElement("div");
                tempDivElement.innerHTML = html;
                // Retrieve the text property of the element 
                return tempDivElement.textContent || tempDivElement.innerText || "";
            },
            add() {
                var w = this.setting.widget
                if (w.indexOf('sideMenu') == -1) w.push('sideMenu')
            },
            remove() {
                var w = this.setting.widget
                if (w.indexOf('sideMenu') > -1) delete w[w.indexOf('sideMenu')]
            }
        },
        infoPanel: {
            run() {
                var w = this.setting.widget
                if (w.indexOf('infoPanel') == -1) { w.push('infoPanel') } else return

                let setRun = () => {
                    var content = `
                    <div id="info-panel" class="info-panel" style="display:none;">
                        <div class="info-main">
                            <div class="info-panel-moveable"></div>
                            <div class="info-content"></div>
                        </div>
                        <div class="info-close"><i class="fa-solid fa-xmark"></i></div>
                        <div class="info-template"></div>
                    </div>
                    <div class="info-back"></div>`;
                    document.body.insertAdjacentHTML("beforeend", content);
                    var close = document.querySelector('.info-close');
                    close.addEventListener("click", () => { this.panelClose() });
                }
                if (document.readyState == "loading") window.addEventListener("DOMContentLoaded", setRun)
                else setRun()
            },
            style_1() {
                var itemcss = document.querySelector(`[data-css="infoPanel"]`);
                if (!itemcss) {
                    style = document.createElement('style'); document.body.appendChild(this.setting.style.style_1.infoPanel);
                    style.id = i; style.type = 'text/css'; style.textContent = css;
                }
            },
            /**
             * 
             * @param {object} object -  Refer this info panel structure.
             */
            content(i) {
                const f = () => {
                    var co = 'content', ty = 'type', ip = 'InfoPanel', tem = 'template';
                    if (!i) { console.error('Missing parameter'); return }
                    if (typeof i == 'object') {
                        if (!i[ty] || i[ty] !== ip || !i[co]) { console.error('"Info Panel" content format wrong.'); return }
                        if (i[tem]) { this._info.contentTemplate(i) }
                        else this.info(i[co])
                    } else if (typeof i == 'string') {
                        this.panelOpen()
                        document.querySelector('.info-content').innerHTML = decodeHTMLEntities(i)
                    }
                }
                if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
            },
            info(arr) {
                var itemContainerDom = document.getElementById('info-panel');

                if (!Object.keys(arr).length) { console.error('Missing information!'); return }
                if (itemContainerDom.style.display != 'none') itemContainerDom.style.display = 'none'
                this.panelOpen(); this._info._loadInfo(arr);

                var itemMoveable = document.querySelector('.info-panel-moveable'),
                    itemContainerEle = document.querySelector('.info-panel'),
                    itemBack = document.querySelector('.info-back');
                this.upDowndragElement(itemMoveable, itemContainerEle, itemBack);
            },
            _info: {
                infoPanelEvent: {},
                _loadInfo(o, ele) {
                    var ty = 'type', info = 'info', t = 'title', t_repeat, func, kd = this.function.kd();
                    this.infoPanelEvent = {};
                    if (Array.isArray(o)) {
                        for (let [k, v] of Object.entries(o)) {
                            //Funcs for connect inside each function name. Refer https://www.freecodecamp.org/news/how-to-capitalize-words-in-javascript/
                            let func = this.convertFunctionName(v[ty]);
                            if (!(`_${func}` in this)) { console.error(`Info no this function '${func}' to show content`); continue }
                            if (v[ty] == t && this.arrGotKeyValue(v, info) && !t_repeat) { this[`_${func}`](v[info], ele); t_repeat = 1 } // title
                            if (v[ty] != t && this.arrGotKeyValue(v, info)) { this[`_${func}`](v[info], ele) } // all content exclude title
                            if (v[ty] != '_space' && ('height' in v)) { this[`_${func}`](v.height, ele) }
                        }
                    } else { console.error('Info panel info wrong. Please check again.') }
                    for (let [k, v] of Object.entries(this.infoPanelEvent)) {
                        var itemCTA = document.querySelector(`[data-info-panel-btn="${k}"]`);
                        if (itemCTA) {
                            itemCTA.addEventListener("click", function () { kd.openPopup(iframe(v)) })
                        }
                        function iframe(i) {
                            return `
                            <iframe src="${i}" 
                            style="border:0px #ffffff none;" name="Kardia" scrolling="yes" 
                            frameborder="1" marginheight="0px" marginwidth="0px" height="100%" 
                            width="100%" allowfullscreen></iframe>
                            `
                        }
                    }
                    this.infoPanelEvent = {};
                },
                _title(a) {
                    var content = '', t = 'title', ty = 'type', info = 'info'; if (!a || a == '') return;
                    if (Array.isArray(a)) {
                        for (var i = 0; i < a.length; i++) { //include 'type & 'info'
                            if (a[i][ty] && a[i][ty] == t && this.arrGotKeyValue(a[i], info)) {
                                content += `<h1>${decodeHTMLEntities(a[i][info])}</h1>`;
                                document.querySelector('.info-content').insertAdjacentHTML("beforeend", content);
                                break;
                            }
                        }
                    } else if (typeof a === 'string') { // 'info' only
                        content += `<h1>${decodeHTMLEntities(a)}</h1>`;
                        document.querySelector('.info-content').insertAdjacentHTML("beforeend", content);
                    }
                },
                _paragraph(o, ele) {
                    var main; if (!o || o == '') return;
                    if (ele && isElement(ele)) { main = ele } else { main = document.querySelector('.info-content') }
                    for (let [k, v] of Object.entries(o)) {
                        let p = document.createElement('p');
                        if (this.arrGotKeyValue(o, k)) main.appendChild(p); p.innerHTML = decodeHTMLEntities(v);
                    }
                },
                _listInfo(o, ele) {
                    if (!o || o == '') return;
                    var content = '', main, table = document.createElement('table');
                    if (ele && isElement(ele)) { main = ele } else { main = document.querySelector('.info-content') }
                    main.appendChild(table); table.classList.add('info-table')
                    if (Array.isArray(o)) {
                        o.forEach(list => {
                            if (('label' in list) && ('content' in list)) {
                                content += `<tr><td>${decodeHTMLEntities(list.label)}</td><td>${decodeHTMLEntities(list.content)}</td></tr>`
                            } else {
                                for (let [k, v] of Object.entries(list)) {
                                    content += `<tr><td>${decodeHTMLEntities(k)}</td><td>${decodeHTMLEntities(v)}</td></tr>`
                                }
                            }
                        });
                    } else {
                        if (('label' in o) && ('content' in o)) {
                            content += `<tr><td>${decodeHTMLEntities(o.label)}</td><td>${decodeHTMLEntities(o.content)}</td></tr>`
                        } else {
                            for (let [k, v] of Object.entries(o)) {
                                content += `<tr><td>${decodeHTMLEntities(k)}</td><td>${decodeHTMLEntities(v)}</td></tr>`
                            }
                        }
                    }
                    table.innerHTML = content
                },
                _dropdownInfo(o, ele) {
                    if (o == null || o == "") return
                    var main, itemInfo = document.createElement('div');
                    if (ele && isElement(ele)) { main = ele } else { main = document.querySelector('.info-content') }
                    if (!Array.isArray(o)) { console.error(`Dropdown info format wrong.`); return }
                    main.appendChild(itemInfo); itemInfo.classList.add('info-dropdown');

                    for (let [k, v] of Object.entries(o)) {
                        let btn = document.createElement('button'), info = document.createElement('div');
                        itemInfo.appendChild(btn); btn.classList.add('info-dropdown-toggle'); btn.innerHTML = decodeHTMLEntities(v.name);
                        itemInfo.appendChild(info); btn.addEventListener("click", ac);

                        if (typeof v.info == 'string') info.insertAdjacentHTML("beforeend", `<div>${v.info}</div>`)
                        else if (typeof v.info == 'object') {
                            for (let [k1, v1] of Object.entries(v.info)) {
                                if (v1['type'] && `_${this.convertFunctionName(v1['type'])}` in this && v1['info']) {
                                    this[`_${this.convertFunctionName(v1['type'])}`](v1['info'], info)
                                }
                            }
                        }
                        function ac() {
                            if (btn.classList.contains("active")) { btn.classList.remove('active') }
                            else { btn.classList.add('active') }
                        }
                    }
                },
                _button(o, ele) {
                    var main = document.querySelector('.info-content'), cta = document.createElement('div'); if (!o || o == '') return;
                    if (ele && isElement(ele)) { ele.appendChild(cta) } else { main.appendChild(cta) };
                    cta.classList.add('info-cta');
                    for (let [k, v] of Object.entries(o)) {
                        if (!Object.keys(v).length == 0 && this.arrGotKeyValue(v, 'type')) {
                            var t = v['type'];
                            if (`_btn_${t}` in this) this[`_btn_${t}`](v, cta)
                            else { console.error(`Panel button no this ''${t} type function`); continue }
                        }
                    }
                },
                _btn_email(o, ele) {
                    if (!o || o == '' || !o['email']) return;
                    var name = o['button-name'], s = '', cta = document.querySelectorAll('.info-cta'), lastCta = cta[cta.length - 1], d = document.createElement('div');
                    if (ele && isElement(ele)) { ele.appendChild(d) } else { if (cta.length == 1) { cta[0].appendChild(d) } else { lastCta.appendChild(d) } };
                    if (o['subject']) { s = `?subject=${o['subject']}` }
                    d.innerHTML = `<a href="mailto: ${o['email']}${s}" class="info-cta-btn">${decodeHTMLEntities(name.toString())}</a>`
                },
                _btn_url(o, ele) {
                    if (!o || o == '' || !o['url']) return
                    var name = o['button-name'], data = name.toString().replace(/\s/g, "_").toLowerCase(), cta = document.querySelectorAll('.info-cta'), lastCta = cta[cta.length - 1], d = document.createElement('div');
                    if (ele && isElement(ele)) { ele.appendChild(d) } else { if (cta.length == 1) { cta[0].appendChild(d) } else { lastCta.appendChild(d) } };
                    if (o['openNewTab'] == 0 || o['openNewTab'] == false) {
                        if (o['iframe']) {
                            data = this.addinfoPanelEvent(data, o['url'])
                            d.innerHTML = `<div class="info-cta-btn" data-info-panel-btn="${data}">${decodeHTMLEntities(name)}</div>`
                        } else { d.innerHTML = `<a href="${o['url']}" class="info-cta-btn" data-infoPanelBtn="${data}">${decodeHTMLEntities(name)}</a>` }

                    } else {
                        d.innerHTML = `<a href="${o['url']}" target="_blank" class="info-cta-btn" data-infoPanelBtn="${data}">${decodeHTMLEntities(name)}</a>`
                    }
                },
                _btn_view(o, ele) {
                    var cta = document.querySelectorAll('.info-cta'), lastCta = cta[cta.length - 1], d = document.createElement('div');
                    if (ele && isElement(ele)) { ele.appendChild(d) } else { if (cta.length == 1) { cta[0].appendChild(d) } else { lastCta.appendChild(d) } };
                    d.innerHTML = `<div class="info-cta-btn" data-view="${o['view']}">${decodeHTMLEntities(o['button-name'])}</div>`
                    var v = d.querySelector('[data-view]');
                    d.addEventListener('click', () => { this.function.scene.external.view.switchToView(v.dataset.view) })
                },
                _btn_function(o, ele) {
                    var funs = o.function, cta = document.querySelectorAll('.info-cta'), lastCta = cta[cta.length - 1], d1 = document.createElement('div'), d2 = document.createElement('div');
                    if (!funs) { return } else { if (!Object.keys(funs).length) return }
                    if (ele && isElement(ele)) { ele.appendChild(d1) } else { if (cta.length == 1) { cta[0].appendChild(d1) } else { lastCta.appendChild(d1) } };
                    d1.appendChild(d2); d2.classList.add('info-cta-btn'); d2.innerHTML = o['button-name'];
                    for (let [k, v] of Object.entries(funs)) {
                        this.function.scene.internalFunction(v.type, v, d2)
                    }
                },
                _function(o, ele) {
                    if (!o || o == '' || typeof o !== 'object') return;
                    if (ele && isElement(ele)) { main = ele } else { main = document.querySelector('.info-content') }
                    for (const [k, v] of Object.entries(o)) {
                        if (v.type && v.type in this.function.scene.internal)
                            this.function.scene.internalFunction(v.type, v)
                    }
                },
                _image(o, ele) {
                    if (!o || o == '') return;
                    if (ele && isElement(ele)) this.function.img.content(o, ele)
                    else this.function.img.content(o, document.querySelector('.info-content'))
                },
                _space(o, ele) {
                    var main; if (!o || o == '') return;
                    if (ele && isElement(ele)) { main = ele } else { main = document.querySelector('.info-content') }
                    let space = createEle({ tag: 'div', style: 'height: ' + o }); main.appendChild(space)
                },
                _html(o, ele) {
                    var main; if (!o || o == '') return;
                    if (ele && isElement(ele)) { main = ele } else { main = document.querySelector('.info-content') }
                    let d1 = createEle('div'); main.appendChild(d1);
                    for (let [k, v] of Object.entries(o)) {
                        let d = createEle('div');
                        if (this.arrGotKeyValue(o, k)) d1.appendChild(d); d.innerHTML = removeHtmlScriptTag(v);
                    }
                },
                _template(o, ele) {
                    var main, extensions = this.setting.scene.extensions, infoCon = document.querySelector('.info-content'),
                        dct = 'data-content-template', dcta = `${dct}-anchor`, infoTemp = document.querySelector('.info-template');

                    let a = (name) => {
                        var temp = extensions['InfoPanel:' + name], queryTemp = document.querySelector(`[${dct}="${name}"]`),
                            quaryAnc = document.querySelector(`[${dcta}="${name}"]`);

                        if (!queryTemp) {
                            //Create template, if run = 1 or onlick  will process, inside all template run = 0 / 1 also process
                            if (temp && temp.template) {
                                //auto load template, if template no parent so no anchor, inside template all got anchor
                                if (main !== infoCon) createAnchor(main, name)
                                this.contentTemplate(temp); quaryAnc = document.querySelector(`[${dcta}="${name}"]`);
                            } else { console.error('No found "' + name + '" info template extension.'); return }
                        }
                        // above process comfirm got template

                        if (main !== infoTemp) {
                            //Some template multi layer, or cross template, generate inside the cross template
                            if (!quaryAnc) createAnchor(main, name)
                            //When load .info-panel && inside no anchor
                            if (main == infoCon && !infoCon.querySelector(`[${dcta}="${name}"]`))
                                createAnchor(main, name)
                        }

                        var quaryAnc = document.querySelector(`[${dcta}="${name}"]`),
                            quaryInfoTempAnc = infoTemp.querySelector(`[${dcta}="${name}"]`);

                        // if template no run under inside .info-template
                        if (quaryAnc) {
                            //apply function no process for inside .info-template
                            if ((quaryInfoTempAnc && quaryAnc !== quaryInfoTempAnc) || !quaryInfoTempAnc)
                                apply(name), checkInnerExtraTemplate(temp)
                        }
                    }


                    if (ele && isElement(ele)) { main = ele } else { main = infoCon }
                    //Check & load all template, on final loop process link to anchor
                    for (let i in o) { let template = o[i]; a(template) }

                    function apply(n) {
                        var t = infoTemp.querySelector(`[${dct}="${n}"]`), anchor = document.querySelector(`[${dcta}="${n}"]`);
                        if (t && anchor) anchor.parentElement.appendChild(t);
                        else console.error('This info template "' + n + '" already use by other info function.')
                    }
                    function checkInnerExtraTemplate(e) {
                        if (typeof e == 'object') loop(e)
                        else if (typeof e == 'string') {
                            var temp = 'InfoPanel:' + e;
                            if (temp in extensions && extensions[temp].template) loop(temp)
                        }
                        function loop(o) {
                            for (let i in o) {
                                let j = o[i];
                                //info panel inside some function use dom, skip loop dom properties
                                if (!j || i == 'dom' || typeof j !== 'object') continue
                                else if ((j.type && j.type == 'template') && (j.info && Array.isArray(j.info))) {
                                    connectToAnchor(j.info)

                                } else if (typeof j == 'object') {
                                    checkInnerExtraTemplate(j)
                                }
                            }
                        }
                    }
                    function createAnchor(parent, templateName) {
                        var a = document.createElement('div');
                        parent.appendChild(a); a.hidden = true; a.dataset.contentTemplateAnchor = templateName;
                    }
                    function connectToAnchor(o) {
                        for (let i = 0; i < o.length; i++) { const e = o[i]; apply(e) }
                    }
                    function moveChild(oldP, newP) {
                        while (oldP.childNodes.length > 0) {
                            newP.appendChild(oldP.childNodes[0]);
                        }
                    }
                },
                contentTemplate(o) {
                    var tem = document.querySelector(`[data-content-template="` + o.name + `"]`), ac = document.querySelector(`[data-content-templateanchor="` + o.name + `"]`),
                        infoTem = document.querySelector('.info-template');

                    if (!o.content) { console.error('Info template create failed. Missing content.'); return }
                    if (tem || !infoTem) return

                    let temDom = document.createElement('div'); infoTem.appendChild(temDom), temDom.dataset.contentTemplate = o.name
                    this._loadInfo(o.content, temDom)
                },
                convertFunctionName(f) {
                    return f = f.replace(/-|_/g, ' ').replace(/(\s+\w{1})/g, letter => letter.toUpperCase()).replace(/\s/g, '')
                },
                addinfoPanelEvent(data, value) {
                    var num = 2, b = '', n;
                    if (!this.infoPanelEvent[data]) { this.infoPanelEvent[data] = value; return data }
                    else {
                        var a = (i) => {
                            if (this.infoPanelEvent[data + `-${i}`]) { i++; return a(i) }
                            else { b = data + `-${i}`; return i }
                        }
                        n = a(num); this.infoPanelEvent[data + `-${n}`] = value; return b
                    }
                },
                arrGotKeyValue(arr, key) { return this.function.arrGotKeyValue(arr, key) }
            },
            upDowndragElement(elmnt, moveEle, backside) {
                var t = this, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, cH = window.innerHeight,
                    domH = moveEle.children[0].offsetHeight, oriY = moveEle.offsetTop, r1 = 122, r2 = 90,
                    clsBtn = window.getComputedStyle(moveEle, "::before"), clsBtnColor = clsBtn.color,
                    clsBtnFontSize = clsBtn.fontSize;

                if (document.getElementById(elmnt.id + "header")) {
                    if (is_touch_enabled()) document.getElementById(elmnt.id + "header").ontouchstart = dragMouseDown;
                    else document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
                } else {
                    if (is_touch_enabled()) elmnt.ontouchstart = dragMouseDown;
                    else elmnt.onmousedown = dragMouseDown;
                }
                function dragMouseDown(e) {
                    if (e.type == 'mousedown') {
                        e = e || window.event;
                        e.preventDefault();
                        // get the cursor position at startup:
                        pos3 = e.clientX;
                        pos4 = e.clientY; // original y = 70

                        // call a function whenever the cursor moves:
                        document.onmouseup = closeDragElement;
                        document.onmousemove = elementDrag;
                    } else if (e.type == 'touchstart') {
                        var touchLocation = e.targetTouches[0];
                        e.preventDefault();
                        pos3 = touchLocation.clientX;
                        pos4 = touchLocation.clientY;

                        // call a function whenever the cursor moves:
                        elmnt.ontouchend = closeDragElement;
                        elmnt.ontouchmove = elementDrag;
                    }
                }
                function elementDrag(e) {
                    if (e.type == 'mousemove') {
                        e = e || window.event;
                        e.preventDefault();
                        // calculate the new cursor position:
                        pos1 = pos3 - e.clientX;
                        pos2 = pos4 - e.clientY;
                        pos3 = e.clientX;
                        pos4 = e.clientY;
                    } else if (e.type == 'touchmove') {
                        var touchLocation = e.targetTouches[0];
                        // calculate the new cursor position:
                        pos1 = pos3 - touchLocation.clientX;
                        pos2 = pos4 - touchLocation.clientY;
                        pos3 = touchLocation.clientX;
                        pos4 = touchLocation.clientY;
                    }
                    // set the element's new position:
                    backside.style.pointerEvents = 'unset';
                    if (moveEle.offsetTop != 0) {
                        //below top 0 and no over top
                        if (moveEle.offsetTop > 0) {
                            moveEle.style.top = (moveEle.offsetTop - pos2) + "px";
                        } else if (moveEle.offsetTop < 0) {
                            //over top
                            moveEle.style.top = 0 + "px";
                        }
                    } else {
                        //top 0
                        if (pos2 < 0) {
                            //move down from 0
                            moveEle.style.top = (moveEle.offsetTop - pos2) + "px";
                        }
                    }
                    moveEle.children[0].style.height = '100%'
                    //inner
                    var domSpace = cH - moveEle.offsetTop;
                    if (domSpace < r1) {
                        if (domSpace < r1 && domSpace > r2) {
                            moveEle.children[0].style.opacity = 0.7
                            moveEle.style.setProperty('--beforeColor', clsBtnColor);
                            moveEle.style.setProperty('--beforeFontSize', clsBtnFontSize);
                            moveEle.style.textShadow = '';
                        } else if (domSpace < r2 - 1) {
                            moveEle.children[0].style.opacity = 0.4
                            moveEle.style.setProperty('--beforeColor', 'white');
                            moveEle.style.setProperty('--beforeFontSize', '35px');
                            moveEle.style.textShadow = '0px 0px 15px #ffffff';
                        }
                    } else if (domSpace > r1) {
                        moveEle.children[0].style.opacity = ''
                    }
                }
                function closeDragElement(e) {
                    var domSpace = cH - moveEle.offsetTop
                    backside.style.pointerEvents = 'none';
                    if (domSpace < r1) {
                        if (domSpace < r1 && domSpace > r2) {
                            moveEle.style.top = oriY + 'px'
                            moveEle.children[0].style.opacity = ''
                        } else if (domSpace < r2 - 1) {
                            moveEle.style.top = cH + 'px'
                            moveEle.style.setProperty('--beforeHeight', 0)
                            //moveEle.remove()
                            t.panelClose()
                        }
                    }
                    /* stop moving when mouse button is released:*/
                    if (e.type == 'mouseup') {
                        document.onmouseup = null;
                        document.onmousemove = null;
                    } else if (e.type == 'touchend') {
                        elmnt.ontouchend = null;
                        elmnt.ontouchmove = null;
                    }
                }
                function is_touch_enabled() {
                    return ('ontouchstart' in window) ||
                        (window.DocumentTouch && document instanceof window.DocumentTouch) ||
                        (navigator.maxTouchPoints > 0) ||
                        (navigator.msMaxTouchPoints > 0);
                }
            },
            panelClose() {
                var content = document.querySelector('.info-content'), m = document.querySelector('.info-main'), ic = getElement('info-panel');
                this.sortOutAllTemplates()
                content.innerHTML = null; ic.setAttribute('style', ''); ic.style.display = 'none', m.setAttribute('style', '')
            },
            panelOpen() {
                var content = document.querySelector('.info-content'), tems = content.querySelectorAll('[data-content-template]');
                if (tems) this.panelBeforeOpen();
                getElement('info-panel').style.display = null, scrollTo(content)
            },
            panelBeforeOpen() {
                this.sortOutAllTemplates(); document.querySelector('.info-content').innerHTML = null;
            },
            sortOutAllTemplates() {
                var content = document.querySelector('.info-content'), infoTemp = document.querySelector('.info-template'), tems = content.querySelectorAll('[data-content-template]'),
                    dropAct = document.querySelectorAll('.info-dropdown-toggle, .active');
                if (tems) {
                    tems.forEach(item => { infoTemp.appendChild(item) })
                }
                if (dropAct) dropAct.forEach(item => { item.classList.remove('active') })
            },
            sample() {
                var s1 = `Sample function itemContainer(arr) array`,
                    s2 = `
                    "type": "infoPanel",
                    "node": "<object name>", //if one object to multi material please add material this example <{material name}object name>, remove <>",
                    "material": "<material name>",
                    "content": [
                        {
                            "type": "title",
                            "info": "<custom title>"
                        },
                        {
                            "type": "paragraph",
                            "info": [
                                "<custom html information 1>", "<custom html information 2 & etc>"
                            ]
                        },
                        {
                            "type": "list-info",
                            "info": {
                                "<custom left title>": "<custom right info>", //example below
                                "Series": "Guānyīn Series",
                                "Date": "2022"
                            }
                        },
                        {
                            "type": "dropdown-info",
                            "info": {
                                "<custom drop down title>": "<custom dropdown info>",
                                "Description": "Ho, here is my discription.",
                            }
                        },
                        {
                            "type": "button",
                            "info": [
                                {
                                    "type": "url",
                                    "button-name": "<custom button name>",
                                    "url": "< customurl link>",
                                    "openNewTab": true //true or false,true = This browser tab go this link. false = open a new tab for this link, no need put "", example below 
                                },
                                {
                                    "type": "email",
                                    "button-name": "<custom button name>",
                                    "email": "<your email>",
                                    "subject": "<email subject>"
                                },
                                {
                                    "type": "view",
                                    "button-name": "<custom button name>",
                                    "view": "<scene view>"
                                }
                            ]
                        }
                    ]
                },`
                console.log(s1); console.log(s2); return
            }
        },
        admin: {},
        widget: {
            notification: {},
            functionPopIp: {},
            share: {
                run() {
                    var w = this.setting.widget,
                        k = 'widget', v = 'share', a = { [k]: v }, f = w.findIndex(x => x[k] === v)
                    if (f == -1) { w.push(a) } else return
                    let setRun = () => {
                        var a = this.parent, share = `
                        <div id="share-container" style="pointer-events: none;">
                            <div id="share-container-slide">
                                <div id="btn-share" class="ui-hoverable menu-item">
                                    <i class="fas fa-share-alt" style="font-size: 24px; line-height: 44px; padding-right: 2px;"></i>
                                </div>
                                <div id="share-menu" style="display: none;">
                                    <button data-share="facebook" class="text-brd-btm-clr">
                                        <i class="fab fa-facebook"></i>
                                        <span class="text">facebook</span>
                                    </button>
                                    <button data-share="twitter"class="text-brd-btm-clr">
                                        <i class="fab fa-twitter"></i>
                                        <span class="text">twitter</span>
                                    </button>
                                    <button data-share="telegram" class="text-brd-btm-clr">
                                        <i class="fab fa-telegram-plane"></i>
                                        <span class="text">telegram</span>
                                    </button>
                                    <button data-share="whatsapp" class="text-brd-btm-clr">
                                        <i class="fab fa-whatsapp"></i>
                                        <span class="text">whatsapp</span>
                                    </button>
                                    <button data-share="copy-link" class="text-brd-btm-clr">
                                        <i class="fas fa-link"></i>
                                        <span class="text">Copy Link</span>
                                    </button>
                                    <button data-share="other">
                                        <i class="fas fa-share"></i>
                                        <span class="text">other</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        `
                        document.body.insertAdjacentHTML("beforeend", share)
                    }
                    if (document.readyState == "loading") window.addEventListener("DOMContentLoaded", setRun)
                    else setRun()
                },
                style_1() {
                    var scs = getElement('share-container-slide'), sbtn = getElement('btn-share'), sm = getElement('share-menu'), sfb = document.querySelector('[data-share="facebook"]'),
                        stt = document.querySelector('[data-share="twitter"]'), stl = document.querySelector('[data-share="telegram"]'),
                        swa = document.querySelector('[data-share="whatsapp"]'), sl = document.querySelector('[data-share="copy-link"]'), sOther = document.querySelector('[data-share="other"]')

                    scs.style.visibility = 'hidden';
                    if (!checkIsMobile()) { sOther.remove(), sl.setAttribute('class', null) }
                    if (!this.setting.closeUXUI.OpenClose) { this.function.sliding.slideTop(0, scs), scs.dataset.openClose = 0 }
                    this.setting.events.shareList = () => {
                        sfb.addEventListener('click', () => { this.shareLink(sfb.dataset.share) })
                        stt.addEventListener('click', () => { this.shareLink(stt.dataset.share) })
                        stl.addEventListener('click', () => { this.shareLink(stl.dataset.share) })
                        swa.addEventListener('click', () => { this.shareLink(swa.dataset.share) })
                        sl.addEventListener('click', () => { this.shareLink(sl.dataset.share) })
                        if (!checkIsMobile()) sOther.addEventListener('click', () => (this.shareLink(sOther.dataset.share)))
                    }
                    this.setting.events.share = () => {
                        sbtn.addEventListener('click', () => {
                            if (sm.style.display == 'none') { this.listOpen() } else { this.listClose() }
                        })
                    }
                    this.setting.closeUXUI.menuClose.shareClose = () => { this.uxuiClose('slideTop') }
                    setTimeout(() => { scs.style.visibility = ''; }, 1050)
                },
                uxuiClose(f) {
                    var menuClose = getElement('menu-bar-folder'), s = getElement('share-container-slide')
                    menuClose.addEventListener('click', () => {
                        this.listClose(); this.function.sliding['slideTop'](0, s)
                    })
                },
                listOpen() {
                    var sm = getElement('share-menu'); sm.style.display = null
                },
                listClose() {
                    var sm = getElement('share-menu'); sm.style.display = 'none'
                },
                shareLink(media) {
                    /* 
                    Social Share Links:
                    WhatsApp:
                    https://wa.me/?text=[post-title] [post-url]
                    Facebook:
                    https://www.facebook.com/sharer.php?u=[post-url]
                    Twitter:
                    https://twitter.com/share?url=[post-url]&text=[post-title]
                    Pinterest:
                    https://pinterest.com/pin/create/bookmarklet/?media=[post-img]&url=[post-url]&is_video=[is_video]&description=[post-title]
                    LinkedIn:
                    https://www.linkedin.com/shareArticle?url=[post-url]&title=[post-title]
                    */
                    const pageUrl = encodeURI(document.location.href);
                    const unCodePageUrl = window.location.href;
                    const msg = document.title;

                    const whatsappAPI = `https://wa.me/?text=${pageUrl}.${msg}`;
                    const twitterAPI = `https://twitter.com/intent/tweet?url=${pageUrl}text=${msg}`;
                    const facebookAPI = `https://www.facebook.com/sharer.php?u=${pageUrl}`;
                    const telegramAPI = `https://t.me/share/url?url=${pageUrl}&text=${msg}`;

                    if (media == 'facebook') window.open(facebookAPI, 'blank');
                    else if (media == 'whatsapp') window.open(whatsappAPI, 'blank');
                    else if (media == 'telegram') window.open(telegramAPI, 'blank');
                    else if (media == 'twitter') window.open(twitterAPI, 'blank');
                    else if (media == 'copy-link') {
                        var inputc = document.body.appendChild(document.createElement("input"));
                        inputc.value = window.location.href;
                        inputc.focus();
                        inputc.select();
                        document.execCommand('copy');
                        inputc.parentNode.removeChild(inputc);
                        alert("URL Copied.");
                    } else if (media == 'share-other') {
                        navigator.share({
                            title: document.title,
                            text: '',
                            url: unCodePageUrl,
                        });
                    }
                }

            },
            floatingSocialChat: {
                run() {
                    var w = this.setting.widget,
                        k = 'widget', v = 'floatingSocialChat', a = { [k]: v }, f = w.findIndex(x => x[k] === v)
                    if (f == -1) { w.push(a) } else return
                    this.info = {}
                    let setRun = () => {
                        var i = `
                        <div class="socialChat" style="visibility: hidden;">
                            <div class="socialChatSlide">
                                <div class="socialChatPopup">
                                    <div>
                                        <div>
                                            <div class="socialChatCls">X</div>
                                            <div style="padding: 0 25px 0 15px;display: flex;flex-direction: column;">
                                            <span style="font-weight: bold;">Hi, can we help you?</span>
                                            <span style="font-size: 12px;padding-top: 5px;color: #a3a1a1;"><u>Login to application to chat</u></span>
                                            </div>
                                        </div>
                                        <div class="socialChatFace"></div>
                                    </div>
                                    <div style="font-size: 12px;">
                                        Chat via
                                        <div class="socialChatApp"></div>
                                    </div>
                                </div>
                                <div class="ui-hoverable socialChatBtm">
                                    <i class="fa-regular fa-message fa-flip-horizontal" style="font-size: 24px;vertical-align: middle;text-align: center;"></i>
                                    <div class="socialChatNoti">1</div>
                                </div>
                          </div>
                        </div>
                        `
                        document.body.insertAdjacentHTML("beforeend", i)
                    }
                    if (document.readyState == "loading") window.addEventListener('DOMContentLoaded', setRun)
                    else setRun()
                },
                style_1(array = 'kardia') {
                    let domain = window.location.hostname;

                    if (document.URL.match(/disableSocialChat/) || !this.hasOwnProperty('info')) return
                    if (typeof this.info == 'object' && Object.keys(this.info).length == 0) {
                        if (domain.match(/kardiaverse/g) || domain.match(/kardiaworld/g)) this.infoSetting('kardia')
                        else if (domain.match(/archimat/g)) this.infoSetting('archimat')
                        else if (domain.match(/dexxr/g)) this.infoSetting('dexxr')
                        else this.infoSetting('kardia')
                    }

                    if (Object.keys(this.info).length !== 0) array = this.info; else return

                    var chat = document.querySelector('.socialChat'), chats = document.querySelector('.socialChatSlide'), appCon = document.querySelector('.socialChatApp'), chatCls = document.querySelector('.socialChatCls'), chatBtm = document.querySelector('.socialChatBtm'), chatPop = document.querySelector('.socialChatPopup'), chatNoti = document.querySelector('.socialChatNoti'),
                        m = getElement('menu-bar-folder'), msb = getElement('menu-bar-slide');

                    appCon.innerHTML = this.socialPlatformFilter(array)
                    chatPop.classList.add('active')
                    chats.style.transition = 'unset'

                    var sw = document.body.clientWidth, cw = chat.offsetWidth, cr = sw - chat.getBoundingClientRect().right, cl = chatBtm.getBoundingClientRect().left

                    this.setting.closeUXUI.menuClose.floatingSocialChatRightCss = function () {
                        var mn = getElement('menu-bar'), mnw = mn.offsetWidth, requestWidth = mnw + ((cw + (10 * 2)) * 2),
                            f = `
                            <style>
                            @media only screen and (max-width: ${requestWidth}px) {
                              .socialChat { bottom: calc(${getElement('menu-bar-content').offsetHeight}px + 10px) !important; }
                            }
                            </style>`
                        chat.insertAdjacentHTML("beforeend", f)
                    }

                    if (array['setting']) {
                        if (array['setting']['position'] == 'left') {
                            var p = getElement('desktop-btm-left-powered')
                            chat.style.left = '10px'; chat.style.right = 'unset'; chats.style.alignItems = 'flex-start', cl = chatBtm.getBoundingClientRect().left;
                            if (p && p.offsetHeight > 0) { chat.style.bottom = p.offsetHeight + (document.body.getBoundingClientRect().bottom - p.getBoundingClientRect().bottom) + 10 + 'px' }
                            if (array['setting']['openClose'] == 'close')
                                chats.style.left = -chatBtm.offsetWidth + 'px'
                            else if (array['setting']['openClose'] == 'open')
                                chats.style.left = null
                        } else if (array['setting']['position'] == 'right') {
                            if (array['setting']['openClose'] == 'close')
                                chats.style.right = -chatBtm.offsetWidth + 'px'
                            else if (array['setting']['openClose'] == 'open')
                                chats.style.right = null
                        }
                    }


                    this.setting.closeUXUI.menuClose.floatingSocialChat = () => {
                        chatBtm.addEventListener("click", openCls)
                        chatCls.addEventListener("click", openCls)

                        m.addEventListener("click", () => {
                            openCls('close')
                            if (chats.style.left) this.function.sliding.slideLeft(0, chats)
                            else this.function.sliding.slideRight(0, chats)
                        })
                    }

                    chatPop.classList.remove('active')
                    chat.style.visibility = ''
                    setTimeout(() => { chats.style.transition = '' }, 100)

                    function openCls(i) {
                        if (i == 'close') chatPop.classList.remove('active')
                        else if (i == 'open') { chatPop.classList.add('active'); chatNoti.style.display = 'none' }
                        else if (chatPop.classList.contains('active')) chatPop.classList.remove('active')
                        else { chatPop.classList.add('active'); chatNoti.style.display = 'none' }
                    }
                },
                infoSetting(o) {
                    if (!o || !this.hasOwnProperty('info')) return;
                    else if (typeof o == 'string') {
                        if (o.toLowerCase() == 'kardia') this.info = this.kardiaInfo()
                        else if (o.toLowerCase() == 'archimat') this.info = this.archiomatInfo()
                        else if (o.toLowerCase() == 'dexxr') this.info = this.dexxrInfo()
                    } else if (typeof o === 'object' && o !== null) {
                        if (!(o['messenger'] || o['whatsapp'] || o['telegram'] || o['wechat'] || o['line'] || o['email'])) {
                            console.error('Please fill in your social media chat information, you can use API function floatingSocialChat().sample() to see the sample.'); return
                        } else {
                            var i;
                            if (!this.setting.closeUXUI.openClose) i = 'close'; else i = 'open'
                            if (o.setting) {
                                if (o.setting.openClose) o.setting.openClose = i
                                if (o.setting.position !== 'left' || o.setting.position !== 'right') o.setting.position = 'right'
                            } else {
                                o.setting = {}, o.setting.openClose = i, o.setting.position = 'right'
                            }
                            this.info = o
                        }
                    } else { console.error('Please fill in your social media chat information, you can use API function floatingSocialChat().sample() to see the sample.'); return }

                    let sca = document.querySelector('.socialChatApp');
                    if (document.readyState == 'complete' && sca && sca.firstChild) {
                        sca.innerHTML = this.socialPlatformFilter(this.info)
                    }
                },
                disable() {
                    delete this.info
                    if (!document.readyState == "complete")
                        window.addEventListener('load', () => {
                            getElementById('socialChat').hidden = true, getElementById('socialChat').style.display = 'none'
                        })
                },
                kardiaInfo() {
                    var i;
                    if (!this.setting.closeUXUI.openClose) i = 'close'
                    else i = 'open';
                    return {
                        "messenger": "kardiaworld",
                        "whatsapp": "+65 9090 3082",
                        "telegram": null,
                        "wechat": null,
                        "line": null,
                        "email": "hello@kardiaworld.com",
                        "setting": {
                            "openClose": i,
                            "position": "right"
                        }
                    };
                },
                archiomatInfo() {
                    var i;
                    if (!this.setting.closeUXUI.openClose) i = 'close'
                    else i = 'open'
                    array = {
                        "messenger": "archimat.xr",
                        "whatsapp": "+65 9090 3082",
                        "telegram": null,
                        "wechat": null,
                        "line": null,
                        "email": "hello@archimat.io",
                        "setting": {
                            "openClose": i,
                            "position": "right"
                        }
                    }
                    return array
                },
                dexxrInfo() {
                    var i;
                    if (!this.setting.closeUXUI.openClose) i = 'close'
                    else i = 'open'
                    array = {
                        "messenger": "dexXR",
                        "whatsapp": "+65 9090 3082",
                        "telegram": null,
                        "wechat": null,
                        "line": null,
                        "email": "hello@dexxr.io",
                        "setting": {
                            "openClose": i,
                            "position": "right"
                        }
                    }
                    return array
                },
                sample() {
                    var s = {
                        "messenger": "YOUR ID",
                        "whatsapp": "YOUR PHONE NUMBER",
                        "telegram": "YOUR ID",
                        "wechat": "YOUR ID",
                        "line": "YOUR ID",
                        "email": "YOUR EMAIL",
                        "setting": {
                            "openClose": "close", //default, "close" or "open"
                            "position": "right" //default, "left" or "right"
                        }
                    }
                    console.log(s)
                },
                socialPlatformFilter(array, title) {
                    var app = '', title;
                    if (!title) title = encodeURI('Enquiry from virtual scene: ' + document.title)

                    if (array['messenger']) {
                        var l = 'http://m.me/'
                        if (array['messenger'].match(l)) { array['messenger'] = array['messenger'].replace(l, '') }
                        app += `<a href="${l + array['messenger']}" target="_blank" data-action="social-chat/messenger" title="Messenger" itemprop="url"><i class="fa-brands fa-facebook-messenger"></i></a>`
                    }
                    if (array['whatsapp']) {
                        var l = 'https://wa.me/+'
                        if (array['whatsapp'].match(l)) { array['whatsapp'] = array['whatsapp'].replaceAll(l, '') }
                        if (array['whatsapp'].match(' ')) { array['whatsapp'] = array['whatsapp'].replaceAll(' ', '') }
                        if (array['whatsapp'].match(/[&\/\\#,+()$~%.'":*?<>{}]/g)) { array['whatsapp'] = array['whatsapp'].replace(/[&\/\\#,+()$~%.'":*?<>{}]/g, '') }
                        app += `<a href="${'https://wa.me/' + array['whatsapp']}?text=${title}" target="_blank" title="WhatsApp" itemprop="url"><i class="fa-brands fa-whatsapp"></i></a>`
                    }
                    if (array['telegram']) {
                        var l = 'https://t.me/'
                        if (array['telegram'].match(l)) { array['telegram'] = array['telegram'].replace(l, '') }
                        app += `<a href="${l + array['telegram']}&text=${title}" target="_blank" title="Telegram" itemprop="url"><i class="fa-brands fa-telegram"></i></a>`
                    }
                    if (array['wechat'] && this.mobileAndTabletCheck()) {
                        var l = 'weixin://dl/chat?'
                        if (array['wechat'].match(l)) { array['wechat'] = array['wechat'].replace(l, '') }
                        app += `<a href="${l + array['wechat']}" target="_blank" title="Wechat" itemprop="url"><i class="fa-brands fa-weixin"></i></a>`
                    }
                    if (array['line']) {
                        var l = 'https://line.me/R/oaMessage/'
                        if (array['line'].match(l)) { array['line'] = array['line'].replace('l', '') }
                        app += `<a href="${l + array['line']}/?${title}" target="_blank" title="Line" itemprop="url"><i class="fa-brands fa-line"></i></a>`
                    }
                    if (array['email'])
                        app += `<a href="mailto:${array['email']}?subject=${title}" target="_blank" title="Email" itemprop="url"><i class="fa-regular fa-envelope"></i></a>`

                    return app
                },
                mobileAndTabletCheck() {
                    let check = false;
                    (function (a) {
                        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                            check = true;
                    })(navigator.userAgent || navigator.vendor || window.opera);
                    return check;
                }

            },
            leftBottomPoweredBy: {
                run(b = 'Kardia', l = 'https://www.kardiaworld.com/') {
                    let setRun = () => {
                        if (getElement('desktop-btm-left-powered')) return
                        var a = `
                            <div id="desktop-btm-left-powered" class="ui-bottom ui-left ">
                                <div id="powered-panel" class="ui-hoverable ui-panel menu-background menu-1-ui-hoverable">
                                    <a href="${l}" target="blank">VR Scene Powered By ${b}</a>
                                </div>
                                <style>
                                #desktop-btm-left-powered {position: absolute;z-index: 15;overflow: hidden;max-width: calc(50vw - (420px / 2) - 10px - 50px);border-radius: calc(var(--borderRadius) / 2);}#powered-panel {cursor: pointer;padding: 5px 12px 5px 12px;background-color: var(--backgroundColor);}#powered-panel > a {color: var(--button_color);text-decoration: none;}#powered-panel > a:hover {color: var(--button_hoverColor) !important;}@media only screen and (max-width: calc(420px + ((10px + 193px + 50px) * 2))) {#desktop-btm-left-powered {display: none;}}@media only screen and (max-width: 450px) {#desktop-btm-left-powered {display: none;}}
                                </style>
                            </div>`
                        document.body.insertAdjacentHTML("beforeend", a); return getElement('desktop-btm-left-powered')
                    }
                    if (document.readyState == "loading") window.addEventListener('DOMContentLoaded', setRun)
                    else setRun()
                }
            },
            OtherUXUI: {
                setting: {},
                run() {
                    var w = this.setting.widget,
                        k = 'widget', v = 'OtherUXUI', a = { [k]: v }, f = w.findIndex(x => x[k] === v)

                    if (Array.isArray(w) && f == -1) {
                        for (let i = 0; i < w.length; i++) {
                            if (typeof w[i] == 'object') {
                                if (v in w[i]) return
                                else if (i + 1 == w.length) { w.push(a); return }
                            }
                        }
                    } else return
                },
                style_1() {
                    this.playButtonToText()
                    this.infoBar()
                    this.primaryProgress()
                    this.infoBar()
                },
                /**
                 * 
                 * @param {string} text - Button text.
                 * @param {string} style - Button CSS style.
                 * @param {string} textBeforeHoverColor - Text CSS color.
                 * @param {string} backgroundColor - Backgoround CSS color.
                 * @param {string} hoverBackgroundColor - Background hover CSS Color.
                 */
                playButtonToText(text = 'Start', style, textBeforeHoverColor = 'black', backgroundColor = 'var(--backgroundColor, rgba(255, 255, 255, 0.8))', hoverBackgroundColor = 'white') {
                    var css, i;
                    getElement('play-button').remove()
                    if (style) { css = style.toString() } else { css = 'padding: 15px 30px; font-size: 15px; letter-spacing: 0.1rem; border-radius: 30px; transition: all 0.2s ease 0s; text-transform: uppercase; width: 100%; text-align: center;' }
                    i = `
                    <div id="play-button" class="absolute-center">
                        <p class="ui-panel" style="">
                            ${text.toString()}
                        </p>
                        <style>#play-button > p {pointer-events: none;${css} color: ${textBeforeHoverColor}; background-color: ${backgroundColor};}</style>
                    </div>`
                    document.body.insertAdjacentHTML("beforeend", i);
                },
                infoBar() {
                    if (getElement('info-author')) getElement('info-author').parentElement.style.display = 'none'
                    getElement('info-text').setAttribute('style', 'height: unset !important;padding: 10px;background-color: var(--backgroundColor, rgba(255, 255, 255, 0.8));border-radius: calc(var(--borderRadius) / 2);')
                    getElement('info-title').setAttribute('style', 'color: var(--button_color);')
                },
                primaryProgress(color = 'rgba(255,255,255,0.9)') {
                    getElement('primary-progress-done').style.stroke = color;
                },
                infoBar() {
                    // var node = document.getElementById("info-bar"), clone = node.cloneNode(true);
                    // document.body.insertBefore(clone,node.nextSibling);
                }
            }
        },
        function: {
            img: { ...img },
            scene: {
                internal: {
                    Audio() { },
                    ChangeView(value, element) {
                        if (!value || typeof value !== 'object' || !value.views || !Array.isArray(value.views) || !value.views.length) { return };
                        let status = this.setting.scene.viewStatus;
                        const f = () => {
                            let view = this.function.scene.external.view;
                            if (value.views.length == 1) {
                                view.switchToView(value.views[0])
                                status.view = value.views[0], resetSatus();
                            } else {
                                let code = Math.floor(Math.random() * 10000);
                                if (value.tour) {
                                    status.tourCode = code, status.tourExtensionName = value.type + ':' + value.name
                                    for (let [k, v] of Object.entries(value.views)) {
                                        var st = setTimeout(() => {
                                            if (code !== status.tourCode || !status.tour) { clearTimeout(st) }
                                            else {
                                                view.switchToView(v), status.view = v;
                                                if (k == value.views.length - 1) resetSatus()
                                            }
                                        }, ((WALK.TELEPORT_TO_VIEW_ACCELERATION * 1000) + WALK.AUTO_TOUR_IN_VIEW_STILL_TIME_MS) * (k == 0 ? 0.05 : k))
                                        status.tour = 1, status.tourProcess.push(st)
                                    }
                                } else {
                                    var nextView = status.changeViewExtensions, info;
                                    if (!value.name) value.name = randomName(value, nextView)
                                    if (!(value.name in nextView)) nextView[value.name] = {};
                                    info = nextView[value.name]
                                    if (info.index === undefined || info.index >= value.views.length - 1) view.switchToView(value.views[0]), status.view = value.views[0], info.index = 0
                                    else status.view = value.views[info.index + 1], view.switchToView(value.views[info.index + 1]), info.index++;
                                    status.tour = 0, resetSatus()
                                }
                            }
                            function randomName(arr, targetObject) {
                                let name;
                                if (!arr.name) {
                                    name = 'RamdomName' + Math.floor(Math.random() * 1000);
                                    if ((arr.type + ':' + name) in targetObject) randomName(arr, targetObject)
                                    else return name
                                } else console.error('This arr got name.')
                            }
                            function resetSatus() {
                                status.tour = 0, status.tourProcess = [], status.tourCode = 0, status.tourExtensionName = null;
                            }
                        }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`ChangeView missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    HtmlLabel(value, element) {
                        if (!value) return
                        const f = () => { this.function.scene.external.trigger.openPopUp(value) }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`HtmlLabel missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    InfoPanel(value, element) {
                        const f = () => { _KARDIA.infoPanel.content(value) }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`InfoPanel missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    MaterialPicker(value, element) { },
                    MultiTrigger(value, element) {
                        if (!value.extensions || !Array.isArray(value.extensions)) return
                        const f = () => {
                            let sceneExts = this.setting.scene.extensions;
                            for (i in value.extensions) {
                                var valueExts = value.extensions[i];
                                if (typeof valueExts !== 'string' && valueExts.match(/\:/)) continue
                                var s = valueExts.split(":"), targetExt = s[0], targetExtName = s[1];
                                if (!(targetExt in this)) continue
                                for (let [k, v] of Object.entries(sceneExts)) {
                                    if (v.type === targetExt && v.name === targetExtName) {
                                        this[v.type](v)
                                    }
                                }
                            }
                        }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`MultiTrigger missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    ObjectsHide(value, element) {
                        let exF = this.function.scene.external, nodeF = exF.node;
                        if (!value) return
                        const f = () => {
                            if (typeof value == 'string')
                                nodeF.nodeHide(value)
                            else if (Array.isArray(value))
                                value.forEach(eachNode => { nodeF.nodeHide(eachNode) });
                            else if (typeof value == 'object')
                                if (value.nodeType) nodeF.nodeHide(value.nodeType)
                        }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`ObjectsHide missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    ObjectsShow(value, element) {
                        let exF = this.function.scene.external, nodeF = exF.node;
                        if (!value) return
                        const f = () => {
                            if (typeof value == 'string')
                                nodeF.nodeShow(value)
                            else if (Array.isArray(value))
                                value.forEach(eachNode => { nodeF.nodeShow(eachNode) });
                            else if (typeof value == 'object')
                                if (value.nodeType) nodeF.nodeShow(value.nodeType)
                        }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`ObjectsShow missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    OpenWebsite(value, element) { },
                    Script(value, element) {
                        //https://stackoverflow.com/questions/25100707/convert-function-to-json-and-then-to-function-again
                        if (!value || !value.code) return
                        if (value.trigger && value.trigger.type == 'dom') { value.trigger.dom = element }
                        const f = () => { new Function(value.code)() }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`Script() missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    SwitchObjects(value, element) {
                        let exF = this.function.scene.external, nodeF = exF.node, triggerStatus = this.setting.scene.triggerStatus[value.type + ':' + value.name], length = value.nodeTypes.length;
                        if (!value.nodeTypes || !Array.isArray(value.nodeTypes)) return
                        const f = () => {
                            if (triggerStatus.node[triggerStatus.active]) nodeF.nodeHide(triggerStatus.node[triggerStatus.active])
                            triggerStatus.active++
                            if (!value.hideAllAfterLast) { if (triggerStatus.active > length - 1) triggerStatus.active = 0 }
                            else if (triggerStatus.active > length) triggerStatus.active = 0
                            if (triggerStatus.node[triggerStatus.active]) nodeF.nodeShow(triggerStatus.node[triggerStatus.active])
                            exF.other.requestFrame()
                        }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`SwitchObjects missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    SwitchMaterial(value, element) {

                        //need add when direct run this function

                        const f = () => { this.function.scene.external.material.switchMaterial(value) }
                        if (element) {
                            if (!isElement(element) || element == 'string') { element = getElement(element); if (!element) { console.error(`SwitchMaterial missing or wrong element.`); return } }
                            element.addEventListener('click', f)
                        } else f()
                    },
                    VideoTextureControl(value, element) { }
                },
                external: {
                    material: {
                        createNewMaterial() { },
                        createNewTextureFromCanvas(canvas) {
                            const f = () => {
                                var texture = new WALK.Texture(canvas);
                                texture.width = canvas.width;
                                texture.height = canvas.height;
                                texture.hasAlpha = false;
                                texture.minFilter = GLC.LINEAR;
                                texture.wrapS = GLC.REPEAT;
                                texture.wrapT = GLC.REPEAT;
                                texture.needsUpdate = true;
                                texture.notifyLoaded();
                                return texture;
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f(); }
                        },
                        createTextureFromHtmlImage(image, hasAlpha = true) {
                            const f = () => {
                                let kd = this.function.kd();
                                return kd.createTextureFromHtmlImage(image, hasAlpha);
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f(); }
                        },
                        createTextureFromHtmlVideo(video) {
                            const f = () => { let kd = this.function.kd(); return kd.createTextureFromHtmlVideo(video) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f(); }
                        },
                        createImageTexture(src, hasAlpha = true) {
                            if (!src) {
                                console.error('Missing image link.');
                                return;
                            } else {
                                if (!/\.(jpg|jpeg|png)$/.test(src)) {
                                    console.error('"createImageTexture" only support jpg|jpeg|png url link.')
                                    return;
                                }
                            }
                            const f = () => {
                                var img = document.createElement('img');
                                img.src = src;
                                return this.createTextureFromHtmlImage(img, hasAlpha);
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        createVideoTexture(src, muted = true, loop = true) {
                            if (!src) {
                                console.error('Missing video link.');
                                return;
                            } else {
                                if (!/\.(mp4)$/.test(src)) {
                                    console.error('"createVideoTexture" only support .mp4 url link.')
                                    return;
                                }
                            }
                            const f = () => {
                                const video = document.createElement('video');
                                video.src = src;
                                video.autoplay = false;
                                video.muted = muted;
                                video.loop = loop;
                                return this.createTextureFromHtmlVideo(video);
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        getEditableMaterials() {
                            const f = () => { let kd = this.function.kd(); return kd.getEditableMaterials(materialName.toString()) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f(); }
                        },
                        handleHoverChanged(material, hoverActive) {
                            const f = () => {
                                var k = WALK, kd = k['getV' + 'iewer']();
                                if (hoverActive) {
                                    document.body.style.cursor = 'pointer';
                                    material.emissive = true;
                                    //material.emissionStrength = 0.2;

                                    var animated = true;
                                    var strength = .2;
                                    material.emissionStrength = 0;
                                    if (animated) {
                                        clearInterval(timer);
                                        var duration = 0.3;
                                        var interval = 10;//ms
                                        var op = 0.0;

                                        var iop = strength;
                                        var timer = setInterval(function () {

                                            if (op >= iop) {
                                                op = iop;
                                                clearInterval(timer);
                                            }
                                            material.emissionStrength = op;
                                            op += iop / ((1000 / interval) * duration);
                                        }, interval);
                                    } else {
                                        material.emissionStrength = strength;
                                    }

                                    kd.requestFrame();
                                } else {
                                    document.body.style.cursor = '';
                                    material.emissive = false;
                                    kd.requestFrame();
                                }
                            }

                            if (document.readyState == "loading") { this.function.addAction(f) } else { f(); }
                        },
                        onMaterialClicked(material, callback) {
                            const f = () => { let kd = this.function.kd(); kd.onMaterialClicked(material, callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f(); }
                        },
                        onMaterialHoverChanged(material, callback) {
                            const f = () => { let kd = this.function.kd(); kd.onMaterialHoverChanged(material, callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f(); }
                        },
                        /**
                         * Function need run on document status 'loading'.
                         * @param {*} material - Scene material name.
                         * @returns 
                         */
                        findMaterial(material) {
                            if (!material) { console.error('Missing "findMaterial" argument.'); return }
                            const f = () => { let kd = this.function.kd(); return kd.findMaterial(material.toString()); }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f(); }
                        },
                        setAllMaterialsEditable() {
                            const f = () => { let kd = this.function.kd(); kd.setAllMaterialsEditable() }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        setMaterialEditable(material) {
                            const f = () => { let kd = this.function.kd(); kd.setMaterialEditable(material.toString()) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        setMaterialForMesh(material, mesh) {
                            const f = () => { let kd = this.function.kd(); kd.setMaterialForMesh(material, mesh) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        setMaterialForNode() { },
                        /**
                         * - Selected a material and switch the texture (baseColor, baseColorTexture, bump, roughness and etc) to target materials texture
                         * @param {*} o - Extension object.
                         */
                        switchMaterial(o) {
                            const f = () => {
                                if (!o || (typeof o !== 'object' || !o.material || !o.toReplace)) { return }
                                let kd = this.function.kd();
                                var m = () => {
                                    var switchToMaterial, backupMaterial = this.setting.scene.material, imgOrVideo = null;

                                    if (o.material.type == 'sceneMaterial') {
                                        //use scene material properties
                                        if (o.material.name in backupMaterial) switchToMaterial = backupMaterial[o.material.name]
                                        else { switchToMaterial = this.findMaterial(o.material.name) }

                                    } else if (o.material.type == 'dom' && o.material.dom) {
                                        //create new img / video texture
                                        var d = o.material.dom;
                                        if (!(d instanceof Element) || !(d instanceof HTMLVideoElement || d instanceof HTMLImageElement) || !d.src) return;

                                        if (d.src in backupMaterial) switchToMaterial = backupMaterial[d.src]
                                        else {
                                            if (d instanceof HTMLVideoElement) switchToMaterial = this.createTextureFromHtmlVideo(d), imgOrVideo == 'video'
                                            else switchToMaterial = this.createTextureFromHtmlImage(d, (o.material.img && o.material.img.transparent !== undefined) ? o.material.img.transparent : false), imgOrVideo == 'img'

                                            if (o.material.img && o.material.img.transparent) switchToMaterial.isCutout = true
                                            switchToMaterial.id = d.src
                                            backupMaterial[d.src] = switchToMaterial
                                        }

                                    } else if (o.material.type == 'url' && o.material.url) {
                                        //create img / video element then create new texture
                                        var url = o.material.url;
                                        if (o.material.extraAssets) {
                                            url = this.function.scene.external.other.getExtraAssetUrl(url)
                                        }
                                        //https://bobbyhadz.com/blog/javascript-check-if-url-is-image#:~:text=To%20check%20if%20a%20URL,return%20true%20if%20it%20does.
                                        if (/\.(jpg|jpeg|png)$/.test(url)) { imgOrVideo = 'img' } else if (/\.(mp4)$/.test(url)) { imgOrVideo = 'video' }
                                        if (imgOrVideo) {
                                            if (o.material.url in backupMaterial.texture) {
                                                //if create texture alrdy, use back
                                                switchToMaterial = backupMaterial.texture[o.material.url]
                                                if (imgOrVideo == 'video') { switchToMaterial.pause(); switchToMaterial.rewind(); }
                                            } else {
                                                //check if never created, create and backup texture
                                                if (imgOrVideo == 'img') {
                                                    switchToMaterial = this.createImageTexture(url, (o.material.img && o.material.img.transparent !== undefined) ? o.material.img.transparent : false)
                                                    if (o.material.img && o.material.img.transparent) switchToMaterial.isCutout = true
                                                } else if (imgOrVideo == 'video') {
                                                    var muted = true, loop = true;
                                                    if (o.material.video && o.material.video.muted) muted = true;
                                                    if (o.material.video && o.material.video.loop) loop = true;
                                                    switchToMaterial = this.createVideoTexture(url, muted, loop);
                                                }
                                                switchToMaterial.id = o.material.url
                                                backupMaterial.texture[o.material.url] = switchToMaterial
                                            }
                                        } else { console.error('"switchMaterial" only support url video / image format: jpg|jpeg|png|mp4'); return }
                                    }

                                    if (!switchToMaterial) return;

                                    o.toReplace = (!Array.isArray(o.toReplace) ? o.toReplace.split() : o.toReplace);

                                    for (let i = 0; i < o.toReplace.length; i++) {

                                        let toReplace = kd.findMaterial(o.toReplace[i]),
                                            bc = 'baseColor', bct = 'baseColorTexture', rn = 'roughness', rnt = 'roughnessTexture', mt = 'metallic', mtt = 'roughnessTexture', bpt = 'bumpTexture', bps = 'bumpScale';

                                        if (!toReplace) { console.error('No found material to switch.'); continue }

                                        // backup original material which to replace so if can use back to default setting
                                        if (!(toReplace.name in backupMaterial)) {
                                            backupMaterial[toReplace.name] = Object.assign({}, toReplace);
                                        }

                                        //use scene material, include bump , refelct and etc
                                        if (o.material.type == 'sceneMaterial') {
                                            console.log(backupMaterial);
                                            console.log(o.material.name in backupMaterial);
                                            console.log(o.material.name);

                                            //if inside list backup material mean it may could change by other function, backup material is original properties
                                            if (o.material.name in backupMaterial) {
                                                // use original backup material need add '_', no add this will error
                                                toReplace[bc] = backupMaterial[o.material.name][bc]
                                                toReplace[bct] = backupMaterial[o.material.name]['_' + bct]
                                                toReplace[rn] = backupMaterial[o.material.name]['_' + rn]
                                                toReplace[rnt] = backupMaterial[o.material.name]['_' + rnt]
                                                toReplace[mt] = backupMaterial[o.material.name]['_' + mt]
                                                toReplace[mtt] = backupMaterial[o.material.name]['_' + mtt]
                                                toReplace[bpt] = backupMaterial[o.material.name]['_' + bpt]
                                                toReplace[bps] = backupMaterial[o.material.name]['_' + bps]
                                            } else {
                                                toReplace[bc] = switchToMaterial[bc]
                                                toReplace[bct] = switchToMaterial[bct]
                                                toReplace[rn] = switchToMaterial[rn]
                                                toReplace[rnt] = switchToMaterial[rnt]
                                                toReplace[mt] = switchToMaterial[mt]
                                                toReplace[mtt] = switchToMaterial[mtt]
                                                toReplace[bpt] = switchToMaterial[bpt]
                                                toReplace[bps] = switchToMaterial[bps]
                                                // toReplace = switchToMaterial
                                                // var mesh = this.function.scene.external.node.findMeshesWithMaterial(o.toReplace[i]);
                                                // console.log(mesh);
                                                // for (var j = 0; j < mesh.length; ++j) {
                                                //     this.setMaterialForMesh(switchToMaterial, mesh[j]);
                                                //   }
                                            }
                                            console.log(toReplace);
                                        }
                                        //use new img / video material, only change baseColorTexture 
                                        else {
                                            toReplace[bct] = switchToMaterial

                                            if (o.toReplace[i] in backupMaterial) {
                                                // if this material property got replace by other material, reset to original setting exclude texture
                                                // use original backup material need add '_', no add this will error
                                                toReplace[bc] = backupMaterial[o.toReplace[i]][bc]
                                                toReplace[rn] = backupMaterial[o.toReplace[i]]['_' + rn]
                                                toReplace[rnt] = backupMaterial[o.toReplace[i]]['_' + rnt]
                                                toReplace[mt] = backupMaterial[o.toReplace[i]]['_' + mt]
                                                toReplace[mtt] = backupMaterial[o.toReplace[i]]['_' + mtt]
                                                toReplace[bpt] = backupMaterial[o.toReplace[i]]['_' + bpt]
                                                toReplace[bps] = backupMaterial[o.toReplace[i]]['_' + bps]
                                            }

                                            if (imgOrVideo == 'video')
                                                toReplace[bct].play();
                                        }
                                        toReplace.setUniforms()
                                        //when chg baseColor rgb then need use toReplace.setUniforms()
                                    }

                                    kd.requestFrame();
                                    return true;
                                }
                                if (o.trigger && o.trigger.type == 'node' && o.trigger.nodeType) {
                                    kd.onNodeTypeClicked(o.trigger.nodeType, (node, position, distance) => {
                                        m(); return true;
                                    })
                                } else { return m() }
                            }
                            if (document.readyState == "loading") {
                                this.function.addAction(f)
                            } else { f() }
                        },
                        materialSwitchTexture() { }
                    },
                    node: {
                        checkNodeTypeVisible(n) {
                            if (this.findNodesOfType(n)[0].mesh || this.findNodesOfType(n).mesh)
                                return this.findNodesOfType(n)[0].mesh._visible;
                            else {
                                var parent = this.findNodesOfType(n)[0].children;
                                for (let child of parent) {
                                    if (this.checkNodeTypeVisible(child.config.name)) return 1;
                                };
                                return 0;
                            }
                        },
                        onNodeTypeHoverChanged(node, callback) { },
                        findNodesOfType(node) { let kd = this.function.kd(); return kd.findNodesOfType(node); },
                        findMeshesWithMaterial(material) { let kd = this.function.kd(); return kd.findMeshesWithMaterial(material); },
                        getEditableNodeTypes() { },
                        getNodeBoundingCenter(node) {
                            const f = () => {
                                var kd = this.function.kd();
                                if (typeof node == 'string')
                                    return kd.findNodesOfType(node).mesh.geometry.boundingSphere.center
                                else return node.mesh.geometry.boundingSphere.center
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        nodeHide(node) {
                            if (Array.isArray(node) && node[0] && node[0].mesh && node[0].config.name) {
                                for (const n of node) { n.hide() }
                            } else {
                                if (Array.isArray(node)) {
                                    for (let n1 of node) {
                                        if (this.findNodesOfType(n1))
                                            for (const n2 of this.findNodesOfType(n1)) { n2.hide() }
                                    }
                                } else { if (this.findNodesOfType(node)) for (const n of this.findNodesOfType(node)) { n.hide() } }
                            }
                            this.function.scene.external.other.requestFrame()
                        },
                        nodeShow(node) {
                            if (Array.isArray(node) && node[0] && node[0].mesh && node[0].config.name) {
                                for (const n of node) { n.show() }
                            } else {
                                if (Array.isArray(node)) {
                                    for (let n1 of node) {
                                        if (this.findNodesOfType(n1))
                                            for (const n2 of this.findNodesOfType(n1)) { n2.show() }
                                    }
                                } else { if (this.findNodesOfType(node)) for (const n of this.findNodesOfType(node)) { n.show() } }
                            }
                            this.function.scene.external.other.requestFrame()
                        },
                        onNodeTypeClicked(nodeTypeName, callback) {
                            const f = () => { var kd = this.function.kd(); kd.onNodeTypeClicked(nodeTypeName, callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        setNodeTypeEditable(material, mesh) {
                            const f = () => { let kd = this.function.kd(); kd.setNodeTypeEditable(material, mesh) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        }
                    },
                    trigger: {
                        addAnchor(anchorConfig, callback) {
                            if (!anchorConfig) { console.error('Missing "addAnchor" argument.'); return }
                            var kd = this.function.kd();
                            return kd.addAnchor(anchorConfig, callback);
                        },
                        //need process
                        script() { },
                        onTriggerStart() { },
                        onTriggerEnd() { },
                        openPopUp(html) {
                            if (!html) { console.error(`'openPopUp' missing content.`) };
                            const f = () => {
                                let ct = getElement('ext-html-label-content'), cl = getElement('ext-html-label-close');
                                ct.innerHTML = decodeHTMLEntities(html); this._openPopUp(); cl.addEventListener('click', this._closePopUp)
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        openPopUpWithScript(html) {
                            if (!html) { console.error(`'openPopUp' missing content.`) };
                            const f = () => {
                                var ct = getElement('ext-html-label-content'), cl = getElement('ext-html-label-close');
                                ct.innerHTML = html.toString(); this._openPopUp(); cl.addEventListener('click', this._closePopUp)
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        openPopUpIframe(url, scroll, ...arr) {
                            if (!url) { console.error(`'openPopUpIframe' missing url link.`) }; if (!scroll || scroll == 'no') { scroll = 'no' } else { scroll = 'yes' }
                            const f = () => {
                                let ct = getElement('ext-html-label-content'), cl = getElement('ext-html-label-close'), iframe, css, scene = '';
                                if (arr[0].scene && arr[0].scene == 1) { scene = `allow = "gyroscope; accelerometer; xr-spatial-tracking; vr;"` }
                                css = `
                            <style>.ext-popup {top: 0;left: 0;bottom: 0;right: 0;}#ext-html-label-content {padding-top: 38px;height: 100%;width: 100vw;max-height: 100vh;max-width: 100vw;overflow-wrap: break-word;overflow-y: auto;overflow-x: hidden;}#ext-html-label-content iframe {width: 100%;height: 100%;max-height: calc(100% - 4px);}#ext-html-label-close {position: absolute;display: flex;justify-content: flex-end;padding: 10px 15px;background-color: transparent;margin-left: 0;}</style>
                            `
                                iframe = `<iframe src="${decodeHTMLEntities(url)}" name="Kardia" style="border:0px #ffffff none;" scrolling="${scroll}" frameborder="1" marginheight="0px" marginwidth="0px" height="100%" width="100%" allowfullscreen ${scene}></iframe>`
                                ct.innerHTML = iframe + css; this._openPopUp(); cl.addEventListener('click', this._closePopUp)
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        openPopUpScene(url) {
                            this.openPopUpIframe(url, 0, { scene: 1 })
                        },
                        //need process
                        openPopUpVideo() {

                        },
                        _openPopUp() {
                            let lb = getElement('ext-html-label'); lb.classList.add("ext-html-label-topleft"); lb.classList.add("ui-out"); lb.style.display = null;
                            setTimeout(In, 10); function In() { lb.classList.remove("ui-out") }
                        },
                        _closePopUp() {
                            var lb = getElement('ext-html-label'), ct = getElement('ext-html-label-content'), cl = getElement('ext-html-label-close');
                            lb.classList.add("ui-out"); setTimeout(out, 400);
                            function out() { lb.classList.remove("ext-html-label-topleft"); lb.classList.remove("ui-out"); lb.style.display = 'none'; ct.innerHTML = ''; }
                            cl.removeEventListener('click', this._closePopUp)
                        },
                        selectTrigger() { }
                    },
                    view: {
                        getCameraPosition() {
                            const f = () => { var kd = this.function.kd(); return kd.getCameraPosition() }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        getCameraRotation() {
                            const f = () => { var kd = this.function.kd(); return kd.getCameraRotation() }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        onViewSwitchStarted(callback) {
                            const f = () => { var kd = this.function.kd(); kd.onViewSwitchStarted(callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        onViewSwitchDone(callback) {
                            const f = () => { var kd = this.function.kd(); kd.onViewSwitchDone(callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        switchToView(viewNameOrObjectName, maxTime) {
                            const f = () => { var kd = this.function.kd(); kd.switchToView(viewNameOrObjectName, maxTime) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        switchToNewView(location) {
                            if (!location || typeof location !== 'object') { console.error('Need object parameter example {x:1, y:1, z:1, yawDeg:1, pitchDeg:1}.'); return }
                            const f = () => {
                                var position = this.getCameraPosition(), rotation = this.getCameraRotation(), view = new WALK.View();
                                view.position.x = location.x ? parseFloat(location.x) : position.x;
                                view.position.y = location.y ? parseFloat(location.y) : position.y;
                                view.position.z = location.z ? parseFloat(location.z) : position.z;
                                view.rotation.yawDeg = location.yawDeg ? parseFloat(location.yawDeg) : rotation.yawDeg;
                                view.rotation.pitchDeg = location.pitchDeg ? parseFloat(location.pitchDeg) : rotation.pitchDeg;

                                this.switchToView(view)
                            }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        viewsTour() { },
                        //need think how to comvert
                        position() { },
                        rotation() { },
                    },
                    other: {
                        addExtension(ext, run = 0) {
                            let sceExt = this.setting.scene.extensions, scene = this.function.scene, inFn = scene.internal, kd = this.function.kd();
                            if (!ext.type) { console.error(`Missing extension type details.`); return }
                            else if (!ext.name) { console.error(`Got "${ext.type}" extension missing name.`); return }
                            else if (!ext.trigger) { console.error(`Got "${ext.type}" extension missing trigger.`); return }
                            else if (!(ext.type in inFn)) { console.error(`Can't find "${ext.type}" this extension function.`); return }
                            if (ext.name in sceExt) { console.error(`Type "${ext.type}" extension got name "${ext.name}" already`); return }
                            else { sceExt[ext.type + ':' + ext.name] = ext; }
                            if (run) {
                                if (ext.trigger) {
                                    let tri = ext.trigger, triType = tri.type;
                                    if (triType == 'run' && tri.run) {
                                        scene.internalFunction(ext.type, ext);
                                    }
                                    //Suggest only function info panel inside use
                                    else if (triType == 'dom' && tri.dom) { scene.internalFunction(ext.type, ext, tri.dom) }
                                    else if (triType == 'node' && tri.nodeType) {
                                        kd.onNodeTypeClicked(tri.nodeType, (node, position, distance) => {
                                            scene.internalFunction(ext.type, ext); return true;
                                        })
                                        if (this.setting['_EDIT' + '_MODE']) { this.function.addAction(() => { sce.extensionsNode[ext.type + ':' + ext.name] = scene.externalFunction('findNodesOfType', tri.nodeType)[0] }, 2) }
                                    }
                                    else if (triType == 'sphere' || triType == 'sprite') {
                                        this.function.addAction(() => {
                                            let an = scene.external.trigger.addAnchor(ext.trigger, () => { scene.internalFunction(ext.type, ext) });
                                            if (this.setting['_EDIT' + '_MODE']) sce.extensionsNode[ext.type + ':' + ext.name] = an;
                                        }, 2)
                                    }
                                } else scene.internalFunction(ext.type, ext)
                            }
                            return true;
                        },
                        apiUserChangeState() { },
                        captureImage(options) {
                            const f = () => { var kd = this.function.kd(); kd.captureImage(options) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        closeMaterialPicker() { },
                        disableMinimap() { },
                        disableVR() { },
                        enableMinimap() { },
                        enableVR() { },
                        getApiUserState() { },
                        getExtension(tri, name) {
                            const f = () => { var kd = this.function.kd(); return kd.getExtension(tri, name) }
                            if (document.readyState == "loading") { console.error('Function getExtension faild. Can be via function "onSceneLoadComplete"') } else { return f() }
                        },
                        getExtensionConfig() { return this.setting.scene.extensions },
                        getExtraAssetUrl(fileName) {
                            const f = () => { if (window.hasOwnProperty('WALK')) return WALK.getExtraAssetUrl(fileName) }
                            if (document.readyState == "loading") { console.error('Function getExtraAssetUrl faild.  Can be called only after page assets finish loading') } else { return f() }
                        },
                        getSceneBoundingBox() {
                            const f = () => { var kd = this.function.kd(); return kd.getSceneBoundingBox() }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        getWalkMaxSpeed() {
                            const f = () => { var kd = this.function.kd(); return kd.getWalkMaxSpeed() }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { return f() }
                        },
                        helpVisible(boolean) {
                            let kd = this.function.kd(), d = getElement('des' + 'kt' + 'op-he' + 'lp');
                            if (boolean === true) kd.helpVisible = true
                            else if (boolean === false) kd.helpVisible = false
                            else {
                                if (d.style.display == 'none') kd.helpVisible = true
                                else kd.helpVisible = false
                            }
                        },
                        moveTarget(boolean = true) { window.addEventListener("load", (event) => { WALK.CLICK_MOVE_SHOW_TARGET_INDICATOR = boolean }) },
                        onApiUserStateChanged() { },
                        onSceneReadyToDisplay(callback) {
                            const f = () => { var kd = this.function.kd(); kd.onSceneReadyToDisplay(callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        onSceneLoadComplete(callback) {
                            const f = () => { var kd = this.function.kd(); kd.onSceneLoadComplete(callback) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        },
                        openMaterialPicker() { },
                        play() { this.function.kd().play() },
                        infoPanelClose() { this.infoPanel.panelClose(); },
                        removeAnchor() { },
                        requestFrame() {
                            const f = () => { var kd = this.function.kd(); kd.requestFrame() }
                            if (document.readyState == "loading") { console.error('Function requestFrame only support after scene load.') } else { f() }
                        },
                        sceneMode(type) {
                            var s = this.setting.load_status, kd = this.function.kd();
                            if (type == '360') {
                                // for mode 360
                                this.setting.config.SCENE_MODE = '360'
                                if (!s) this.onSceneReadyToDisplay(() => { this.setWalkMaxSpeed(0) })
                                else this.setWalkMaxSpeed(0)
                                this.function.scene.external.node.nodeShow('kd-360')
                            } else if (type == 'vr') {
                                this.setting.config.SCENE_MODE = 'vr'
                                if (!s) this.onSceneReadyToDisplay(() => { this.setWalkMaxSpeed(4) })
                                else this.setWalkMaxSpeed(4)
                                this.function.scene.external.node.nodeHide('kd-360')
                            } else if (!type) return this.setting.config.SCENE_MODE;
                        },
                        seeItem(node) {
                            const f = () => { var kd = this.function.kd(); kd.seeItem(node) }
                            if (document.readyState == "loading") { console.error('Function seeItem faild. Can be run it after scene load complate.') } else { return f() }
                        },
                        setWalkMaxSpeed(num) {
                            const f = () => { var kd = this.function.kd(); kd.setWalkMaxSpeed(num) }
                            if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                        }
                    },
                    analytics: {}
                },
                /**
                 * 
                 * @param {*} funcName - Selected function name
                 * @param {*} value 
                 * @param {*} element 
                 */
                internalFunction(funcName, value, element) {
                    var f = this.internal, ex = this.setting.initExclude, notice;
                    let r = findFunc(f)
                    if (r) return r
                    else if (!notice) console.error(`No '${funcName}' inside scene funtion.`)
                    function findFunc(o) {
                        if (typeof o == 'object') {
                            for (let [k, v] of Object.entries(o)) {
                                if (ex.indexOf(k) != -1 || k == 'function') continue
                                if (k == funcName) { let b = o[k](value, element); notice = 1; return b }
                                if (typeof v == 'object') { let a = findFunc(v); if (a) return a }
                            }
                        }
                    }
                },
                externalFunction(funcName, value, element) {
                    var f = this.external, ex = this.setting.initExclude, notice;
                    let r = findFunc(f)
                    if (r) return r
                    else if (!notice) console.error(`No '${funcName}' inside scene funtion.`)
                    function findFunc(o) {
                        if (typeof o == 'object') {
                            for (let [k, v] of Object.entries(o)) {
                                if (ex.indexOf(k) != -1 || k == 'function') continue
                                if (k == funcName) { let b = o[k](value, element); notice = 1; return b }
                                if (typeof v == 'object') { let a = findFunc(v); if (a) return a }
                            }
                        }
                    }
                },
                kdExtensionsManager(extensions) {
                    if (!extensions || !Array.isArray(extensions)) return
                    const f = () => {
                        let kd = this.function.kd(), sce = this.setting.scene, sceExt = sce.extensions;
                        this.scanAndSetExtentions(extensions), clearTourEvent()

                        for (let i = 0; i < extensions.length; i++) {
                            this.external.other.addExtension(extensions[i])
                        }

                        for (let [k, v] of Object.entries(sceExt)) {
                            let ext = v, tri = ext['trig' + 'ger'];
                            if (tri) {
                                let triType = tri.type;
                                if (triType == 'run') {
                                    if (!tri.run) { continue; }
                                    else if (tri.run) { this.internalFunction(ext.type, ext); }
                                }
                                //Suggest only function info panel inside use
                                else if (triType == 'dom' && tri.dom) { this.internalFunction(ext.type, ext, tri.dom) }
                                else if (triType == 'node' && tri.nodeType) {
                                    kd.onNodeTypeClicked(tri.nodeType, (node, position, distance) => {
                                        this.internalFunction(ext.type, ext); return true;
                                    })
                                    if (this.setting['_EDIT' + '_MODE']) { this.function.addAction(() => { sce.extensionsNode[ext.type + ':' + ext.name] = this.externalFunction('findNodesOfType', tri.nodeType)[0] }, 2) }
                                }
                                else if (triType == 'sphere' || triType == 'sprite') {
                                    this.function.addAction(() => {
                                        let an = this.external.trigger.addAnchor(sceExt[k]['trig' + 'ger'], () => { this.internalFunction(ext.type, ext) });
                                        if (this.setting['_EDIT' + '_MODE']) { sce.extensionsNode[ext.type + ':' + ext.name] = an; }
                                    }, 2)
                                }
                            } else { this.internalFunction(ext.type, ext) }
                        }

                        function clearTourEvent() {
                            let viesStatus = sce.viewStatus, vList = 'vie' + 'w-lis' + 't-it' + 'ems'
                            if (document.getElementById(vList)) {
                                let views = document.getElementById(vList).children;
                                for (var i = 0; i < views.length; i++) {
                                    views[i].addEventListener('click', () => {
                                        if (viesStatus.tourExtensionName in sceExt && viesStatus.tour) {
                                            viesStatus.tour = 0, viesStatus.tourCode = null, viesStatus.tourExtensionName = null
                                            if (viesstatus.tourProcess.length) { for (i in viesstatus.tourProcess) clearTimeout(viesstatus.tourProcess[i]) }; viesstatus.tourProcess = [null]
                                        }
                                    })
                                };
                            }
                        }
                    }
                    if (document.readyState == "loading") { this.function.addAction(f) } else { f() }
                },
                scanAndSetExtentions(o) {
                    //for prepare some setting before run all extension
                    let ext = this.function.scene.external;
                    const scan = (a) => {
                        for (let [k, v] of Object.entries(a)) {
                            if (!v) continue;
                            if (v.type && v.type in this.internal) {
                                if (v.type == 'SwitchMaterial') { swiMat(v); continue; }
                                else if (v.type == 'SwitchObjects') { swiObj(v); continue; }
                                //else if (v.type == 'ChangeView') { chgVie(v); continue }
                            }
                            if (typeof v == 'object' || Array.isArray(v)) scan(v);
                        }
                    }
                    const swiMat = (o) => {
                        //If using info panel and use external img to replace material, inside data will no 'material.name', so we check if no 'toReplace' then return
                        if (!o.toReplace) return;
                        var backupMaterial = this.setting.scene.material;

                        //for get what material wan use to replace
                        if (o.material.name) ext.material.setMaterialEditable(o.material.name);
                        let eM = ext.material;
                        o.toReplace = !Array.isArray(o.toReplace) ? o.toReplace.split() : o.toReplace;
                        if (Array.isArray(o.toReplace)) {
                            for (let i = 0; i < o.toReplace.length; i++) {
                                let rMaterial = o.toReplace[i].toString();
                                eM.setMaterialEditable(rMaterial)
                                this.function.addAction(() => {
                                    //backup the original material, if other function change the selected material then can use back the original properties
                                    if (!(rMaterial in backupMaterial)) {
                                        backupMaterial[rMaterial] = eM.findMaterial(rMaterial);
                                    }
                                }, 2)
                            }
                        }
                        // else {
                        //     //for get what material wan to replace
                        //     eM.setMaterialEditable(o.toReplace)
                        //     this.function.addAction(() => {
                        //         if (!(o.toReplace in backupMaterial)) backupMaterial[o.toReplace] = eM.findMaterial(o.toReplace);
                        //     }, 2)
                        // }
                    }
                    const swiObj = (o) => {
                        let obj = [], triggerStatus = this.setting.scene.triggerStatus, scrName;
                        if (!o.nodeTypes || !o.nodeTypes || !Array.isArray(o.nodeTypes) || !o.nodeTypes.length) return
                        if (!o.name) o.name = randomName(o, triggerStatus)
                        scrName = o.type + ':' + o.name
                        triggerStatus[scrName] = []; triggerStatus[scrName].node = [];
                        this.function.addAction(() => {
                            if (o.hideAllAfterLast || o.hideAllOnStart) triggerStatus[scrName].node.push(0)
                            if (o.hideAllOnStart) {
                                o.nodeTypes.forEach(node => { obj.push(node); triggerStatus[scrName].node.push(node) })
                                this.external.node.nodeHide(obj)
                                triggerStatus[scrName].active = 0
                            } else {
                                triggerStatus[scrName].node.push(o.nodeTypes[0])
                                for (let i = 1; i < o.nodeTypes.length; i++) { obj.push(o.nodeTypes[i]); triggerStatus[scrName].node.push(o.nodeTypes[i]) }
                                this.external.node.nodeHide(obj)
                                if (o.hideAllAfterLast) triggerStatus[scrName].active = 1
                                else triggerStatus[scrName].active = 0
                            }
                        }, 2)
                    }
                    const randomName = (arr, targetObject) => {
                        let name;
                        if (!arr.name) {
                            name = 'RamdomName' + Math.floor(Math.random() * 1000);
                            if ((arr.type + ':' + name) in targetObject) randomName(arr, targetObject)
                            else return name
                        } else console.error('This arr got name.')
                    }
                    if (typeof o == 'object' || Array.isArray(o)) scan(o)
                },
            },
            sliding: {
                /**
                 * 
                 * @param {*} btn - Button string name or element
                 * @param {*} s - Target sliding string name or element
                 * @param {*} n - Element / string element id / number. If after click element and it will display 'none' please using number.
                 * @param {*} c - callback function
                 */
                slideBottom(btn, s, n, c) { this.slide(btn, s, n, 'bottom', c) },
                slideTop(btn, s, n, c) { this.slide(btn, s, n, 'top', c) },
                slideLeft(btn, s, n, c) { this.slide(btn, s, n, 'left', c) },
                slideRight(btn, s, n, c) { this.slide(btn, s, n, 'right', c) },
                slide(btn, slider, num, direction, callback) {
                    var nums;
                    if (typeof btn === 'string') btn = getElement(btn)
                    if (typeof slider === 'string') slider = getElement(slider)
                    if (!num) { nums = slider } else {
                        if (typeof num === 'string') nums = getElement(num);
                        else if (typeof num === 'number') nums = num;
                        else if (isElement(num)) nums = num
                    }

                    if (isElement(nums)) {
                        if (direction == 'bottom' || direction == 'top') nums = nums.offsetHeight
                        if (direction == 'left' || direction == 'right') nums = nums.offsetWidth
                    }
                    btn ? btn.addEventListener("click", slide) : slide();

                    function slide() {
                        var d = 0;
                        if (direction == 'bottom')
                            if (slider.style.bottom == '' || slider.style.bottom == 0 + 'px') {
                                slider.style.bottom = -nums + 'px'; d = 0
                            } else { slider.style.bottom = 0; d = 1 }
                        if (direction == 'top')
                            if (slider.style.top == '' || slider.style.top == 0 + 'px') {
                                slider.style.top = -nums + 'px'; d = 0
                            } else { slider.style.top = 0; d = 1 }
                        if (direction == 'left')
                            if (slider.style.left == '' || slider.style.left == 0 + 'px') {
                                slider.style.left = -nums + 'px'; d = 0
                            } else { slider.style.left = 0; d = 1 }
                        if (direction == 'right')
                            if (slider.style.right == '' || slider.style.right == 0 + 'px') {
                                slider.style.right = -nums + 'px'; d = 0
                            } else { slider.style.right = 0; d = 1 }
                        if (btn) {
                            if (d) btn.dataset.openClose = 1
                            else btn.dataset.openClose = 0
                        }
                        if (callback && typeof callback === 'function') callback()
                    }

                    //Returns true if it is a DOM element    
                    function isElement(o) {
                        return (
                            typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
                                o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string"
                        );
                    }
                }
            },
            scrollTo(element, x = 0, y = 0) {
                if (!element) return
                if (!isElement(element) || element == 'string') {
                    element = getElement(element);
                    if (!element) {
                        console.error(`"scrollTo()" wrong element.`); return
                    }
                }
                element.scrollTo(x, y)
            },
            /**
             * 
             * @param {function} callback  - Function
             * @param {number/string} type  - Default 1. 1 or 'windowLoad' = event window load, 2 or 'sceneReady' = onSceneReadyToDisplay, 3 or 'sceneComplete' = onSceneComplete
             * @param {number} priority - Default 5. Any number, 0 load faster then 10.
             * @returns 
             */
            addAction(callback, type = 1, priority = 5) {
                if (typeof callback !== 'function') { console.error('addAction failed! Callback not a function!'); return }
                var e = this.setting.events, wi = 'windowLoad', rea = 'sceneReady', com = 'sceneComplete', w = e[wi], r = e[rea], c = e[com], num = 0;
                (type === 1 || type == wi) ? type = w : (type === 2 || type == rea) ? type = r : (type === 3 || type == com) ? type = c : type = null;
                if (!type) console.error('"addAction" error, type only 1 to 3')
                if (typeof type[priority] != 'object') delete type[priority]
                if (type[priority]) { num = Object.keys(type[priority]).length }
                if (!type[priority]) { type[priority] = ({ 0: callback }) } else { type[priority][num] = callback }
            },
            /**
             * 
             * @param {number/string} n - Default 1. 1 or 'windowLoad' = event window load, 2 or 'sceneReady' = onSceneReadyToDisplay, 3 or 'sceneComplete' = onSceneComplete
             * @returns 
             */
            runActionType(n = 1) {
                var i = null, wi = 'windowLoad', rea = 'sceneReady', com = 'sceneComplete',
                    ex = [wi, rea, com], e = this.setting.events, w = e[wi], r = e[rea], c = e[com];
                (n === 1 || n == wi) ? i = w : (n === 2 || n == rea) ? i = r : (n === 3 || n == com) ? i = c : i = null;
                if (!i) { console.error('Run action failed!'); return false } else {
                    if (n == 0 && typeof i === 'object') {
                        for (const [k, v] of Object.entries(i)) {
                            if (!isNaN(k) && typeof v === 'object') {
                                for (const [k2, v2] of Object.entries(v)) { v2(); delete v[k2]; }
                                delete i[k]
                            }
                        }
                    } else if ((n > 0 && n <= ex.length) && typeof i === 'object') {
                        for (const [k, v] of Object.entries(i)) {
                            for (const [k2, v2] of Object.entries(v)) { v2(); delete v[k2]; }
                            delete i[k]
                        }
                    } else console.error('Run action somthing wrong!')
                }
            },
            addTitle() {
                var o = this.setting.content.title || void 0;
                if (typeof o === 'object' && o !== null) {
                    for (const [k, v] of Object.entries(o)) {
                        if (getElement(k)) getElement(k).title = v
                        if (document.querySelector(k)) document.querySelector(k).title = v
                        delete o.k;
                    }
                }
            },
            /**
             * 
             * @param {string} idOrCss - Element ID or CSS class, css example .abc or #abc.
             * @param {string} title - Mouse hover show title content.
             */
            addTitleToList(idOrCss, title) {
                this.setting.content.title[idOrCss.toString()] = title.toString()
            },
            arrGotKeyValue(arr, key) {
                if (key in arr) {
                    if (arr[key] === undefined || arr[key] === null || arr[key].length === 0) {
                        return false
                    } else { return true }
                } else { return false }
            },
            ajxPost(method, url, async = true, callback) {
                console.assert(method || url, 'Missing first parameter "POST" or "GET" method or second parameter url link.')
                if (!method || !url) return
                const xhr = new XMLHttpRequest();
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        if (callback && typeof callback == 'function') callback(this.responseText);
                    }
                }
                xhr.open(method, url, async);
                xhr.send();
            },
            isEditMode() {
                let pPathN = parent.window.location.pathname, pathN = window.location.pathname
                if ((window !== window.top) && pathN.match(/draft/) && (pPathN.replace(pathN, '').replace('/', '') == 'ed' + 'itor')) return 1; else 0
            }
        },
        directRunDefault() {
            let t = this, dt = t.setting.style.defaultType

            const loadCss = () => {
                let style = this.setting.style, cssRoot = style.style_1.root, css;
                if (!style[style.defaultType] || !Object.keys(style[style.defaultType]).length) return
                for (const [k, v] of Object.entries(style[style.defaultType])) {
                    if (!v || !Object.keys(v).length) continue
                    if (k == 'root') {
                        css = `<style data-css='general-root' type="text/css">:root` +
                            JSON.stringify(cssRoot).slice(0, 1) + '--' + JSON.stringify(cssRoot).slice(1).replace(/\"/g, '').replace(/\, /g, '^').replace(/\,/g, ';--').replace(/\^/g, ', ').replace(/null/g, ' ') +
                            `</style>`;
                        document.head.insertAdjacentHTML("beforeend", css);
                    } else {
                        css = `<style data-css='${k}' type="text/css">${v}</style>`; document.head.insertAdjacentHTML("beforeend", css);
                        //delete style css exclude root css inside setting
                        delete style[style.defaultType][k]
                    }
                }
            }, loadWidget = (num = 1) => {
                var layer = 4, style = this.setting.style;
                const lo = (o) => {
                    for (const [k, v] of Object.entries(o)) {
                        if (style.defaultType in this[k][v])
                            if (typeof this[k][v][style.defaultType] === 'function') this[k][v][style.defaultType]()
                            else lo(v)
                    }
                }
                if (!this.setting.widget || num > layer) return
                t.setting.widget.forEach((item, index, arr) => {
                    if (typeof item === 'object' && item !== null) lo(item)
                    else if (typeof this[item][style.defaultType] === 'function') this[item][style.defaultType]()
                    else console.error(`'${item}' load faild!`)
                })
            }

            if (!document.body) {
                //when scirpt run at head
                window.addEventListener('DOMContentLoaded', (event) => {
                    loadCss()
                    if (!this.setting.style.run) loadWidget()
                })
            } else {
                window.addEventListener("load", () => {
                    loadCss()
                    if (!this.setting.style.run) loadWidget()
                })
            }

            window.addEventListener("load", () => {
                let func = this.function, kd = func.kd();
                this.function.runActionType(1)

                kd.onSceneReadyToDisplay(() => {
                    this.setting.load_status = 'onSceneReadyToDisplay';
                    this.function.runActionType(2)
                })
                kd.onSceneLoadComplete(() => {
                    this.setting.load_status = 'onSceneLoadComplete';
                    this.function.runActionType(3)
                    Object.values(this.setting.events)
                        .filter(s => typeof s === 'function')
                        .forEach(s => s());
                    Object.values(this.setting.closeUXUI.menuClose)
                        .filter(s => typeof s === 'function')
                        .forEach(s => s());
                    this.function.addTitle()
                })

                if (document.URL.match(/\/draft\/editor/)) kd.play()

                // url link params
                var urlHashParams = window.location.hash.replace('#', '').split('&'),
                    urlSearchParams = new URLSearchParams(window.location.search);

                //record on click data
                kd.onNodeTypeClicked((node, position, distance) => {
                    let sceneOnNodeClicked = this.setting.scene.onNodeClicked,
                        nodeTypePath = [], currentNode = node, materialReplace;

                    while (node) {
                        nodeTypePath.unshift(node.type);
                        node = node.parent;
                    }

                    if (currentNode.type.match(/{[^]*}/)) materialReplace = currentNode.type.match(/{[^]*}/).toString()
                    else materialReplace = ''

                    sceneOnNodeClicked.nodeName = currentNode.type.replace(materialReplace, '')
                    sceneOnNodeClicked.position = position;
                    sceneOnNodeClicked.parent = nodeTypePath;
                    sceneOnNodeClicked.materialName = currentNode.mesh.material.name;
                })

                // for mode 360 clicked
                kd.onNodeTypeClicked(function (node, position, distance) {
                    if (func.scene.externalFunction('sceneMode') == '360' &&
                        node.config.name.match(/^kd-360\S*/)) {
                        // inside scene must rename the move point to 'kd-360.....'
                        var scenePosition = kd.getCameraPosition(), sceneRotation = kd.getCameraRotation(),
                            p = func.scene.externalFunction('getNodeBoundingCenter', node), view = new WALK.View();

                        view.position.x = p.x;
                        view.position.y = p.y;
                        view.position.z = scenePosition.z;
                        view.rotation.yawDeg = sceneRotation.yawDeg;
                        view.rotation.pitchDeg = sceneRotation.pitchDeg;
                        kd.switchToView(view);
                    }
                })
                if (urlHashParams.includes('mode360')) func.scene.externalFunction('sceneMode', '360')
                else {
                    kd.onSceneReadyToDisplay(() => {
                        var pointNode = urlSearchParams.has('360PointName') ? urlSearchParams.get('360PointName') : 'kd-360';
                        for (const node of kd.findNodesOfType(pointNode)) { node.hide(); }
                        kd.requestFrame();
                    })
                }

            }, false)
        },
        init(n = 1, layer = 1) {
            if (layer == 1 && !restrictDomain()) { return }
            this.setting.initExclude = ['setting', 'init']
            let ex = this.setting.initExclude, isFunc;
            for (let i in this) {
                if (ex.indexOf(i) < 0 && typeof this[i] === 'object' && this[i] !== null) {
                    this[i].setting = this.setting;
                    this[i].init = this.init;
                    if (i != 'function') {
                        this[i].function = this.function;
                        this[i].init(0, layer + 1);
                        this[i].init = null;
                    } else if (i == 'function' && layer == 1 && !isFunc) {
                        for (let j in this[i]) {
                            if (ex.indexOf(j) < 0 && typeof this[i][j] === 'object' && this[i][j] !== null) {
                                this[i][j].setting = this[i].setting;
                                this[i][j].function = this[i]
                                this[i][j].init = this[i].init
                                this[i][j].init(0, layer + 1);
                                this[i][j].init = null;
                            }
                        }
                        isFunc = 1
                    }
                }
            }
            if (n) {
                let t = this, dt = t.setting.style.defaultType;

                this['fun' + 'ction']['k' + 'd'] = () => { if (window.hasOwnProperty('WALK')) { var k = WALK, kd = k['getV' + 'iewer'](); return kd } else return }
                _run(t)
                if (this.hasOwnProperty('directRunDefault')) { this['directRunDefault'](); delete this['directRunDefault'] }
                this.setting['_ED' + 'IT_MO' + 'DE'] = this.function['i' + 'sEd' + 'itMo' + 'de']();
                if (this.setting['_ED' + 'IT_MO' + 'DE']) ADMIN = this
                this.function.ajxPost('GET', getExtraAssetUrl('kd-c' + 'ov' + 'er.js' + 'on'), true, (res) => {
                    this.function.scene.kdExtensionsManager(JSON.parse(res).extensions)
                })

                function _run(o, num = 1, layers = 4) {
                    let layer = layers, exc = ['parent', 'init', 'setting', 'directRunDefault'];
                    if (!o || num > layer) return false
                    for (const [key, value] of Object.entries(o)) {
                        if (exc.indexOf(key) == -1) { runO(value); if (isObject(value)) _run(value, num + 1) }
                    }
                    function runO(o) {
                        if (typeof o === 'object' && o !== null)
                            if ('run' in o && typeof o['run'] === 'function') o['run']();
                    }
                }
                function isObject(o) { return typeof o === 'object' && o !== null }
            }
            return this;
        }
    }.init()


    const KARDIA_API = function (a) {
        //API function
        const exf = function () { return kd().function.scene.external },
            kd = function () { return _KARDIA },
            inP = function () { return kd().infoPanel };
        return {
            menu: function () {
                return {
                    style: function (number) {
                        if (!number) return
                        if (typeof number !== 'number') { console.error('Arguments must use number, 1 ~ 2.'); return; }
                        kd().menu['menu_style_' + number](1)
                    },
                    addButton: function (i, f) {
                        kd().menu.addButton(i, f)
                    }
                }
            }(),
            infoPanel: function (i) {
                return {
                    content: function (i) {
                        if (!i || !(typeof i == 'string' || typeof i == 'object')) {
                            console.error('"Info Panel" content format wrong.'); return
                        }
                        inP().content(i)
                    },
                    switchTemplateContent: function (extensionName) { inP().panelClose(extensionName) },
                    open: function () { inP().panelOpen() },
                    close: function () { inP().panelClose() }
                }
            }(),
            //widget
            floatingSocialChat: function () {
                return {
                    info: function (i) {
                        kd().widget.floatingSocialChat.infoSetting(i)
                    },
                    sample: function () {
                        kd().widget.floatingSocialChat.sample()
                    },
                    disable: function () {
                        kd().widget.floatingSocialChat.disable()
                    }
                }
            }(),
            //material
            createNewTextureFromCanvas: function (canvas) { return exf().material.createNewTextureFromCanvas(canvas) },
            createTextureFromHtmlImage: function (image, hasAlpha = true) { return exf().material.createTextureFromHtmlImage(image, hasAlpha) },
            createTextureFromHtmlVideo: function (video) { return exf().material.createTextureFromHtmlVideo(video) },
            createImageTexture: function (src, hasAlpha = true) { return exf().material.createImageTexture(src, hasAlpha) },
            createVideoTexture: function (src, muted = true, loop = true) { return exf().material.createVideoTexture(src, muted, loop) },
            getEditableMaterials: function () { return exf().material.getEditableMaterials() },
            handleHoverChanged: function (material, hoverActive) { exf().material.handleHoverChanged(material, hoverActive) },
            onMaterialClicked: function (material, callback) { exf().material.onMaterialClicked(material, callback) },
            onMaterialHoverChanged: function (material, callback) { exf().material.onMaterialHoverChanged(material, callback) },
            findMaterial: function (material) { return exf().material.findMaterial(material) },
            setAllMaterialsEditable: function () { exf().material.setAllMaterialsEditable() },
            setMaterialEditable: function (material) { exf().material.setMaterialEditable(material) },
            setMaterialForMesh: function (material) { exf().material.setMaterialForMesh(material) },
            switchMaterial: function (material) { exf().material.switchMaterial(material) },
            //node
            checkNodeTypeVisible: function (node) { return exf().node.checkNodeTypeVisible(node) },
            getNodeBoundingCenter: function (node) { return exf().node.getNodeBoundingCenter(node) },
            nodeHide: function (node) { exf().node.nodeHide(node) },
            nodeShow: function (node) { exf().node.nodeShow(node) },
            onNodeTypeClicked: function (nodeTypeName, callback) { exf().node.onNodeTypeClicked(nodeTypeName, callback) },
            setNodeTypeEditable: function (node) { exf().node.setNodeTypeEditable(node) },
            // trigger
            addAnchor: function (anchorConfig, callback) { return exf().trigger.addAnchor(anchorConfig, callback) },
            openPopUp: function (html) { exf().trigger.openPopUp(html) },
            openPopUpWithScript: function (html) { exf().trigger.openPopUpWithScript(html) },
            openPopUpIframe: function (url, scroll, ...arr) { exf().trigger.openPopUpIframe(url, scroll, ...arr) },
            openPopUpScene: function (url) { exf().trigger.openPopUpScene(url) },
            //view
            getCameraPosition: function () { return exf().view.getCameraPosition() },
            getCameraRotation: function () { return exf().view.getCameraRotation() },
            onViewSwitchStarted: function (callback) { exf().view.onViewSwitchStarted(callback) },
            onViewSwitchDone: function (callback) { exf().view.onViewSwitchDone(callback) },
            switchToView: function (viewNameOrObjectName, maxTime) { exf().view.switchToView(viewNameOrObjectName, maxTime) },
            switchToNewView: function (location) { exf().view.switchToNewView(location) },
            //other
            addExtension: function (extension, run = 0) { return exf().other.addExtension(extension, run) },
            captureImage: function (options) { exf().other.captureImage(options) },
            getExtension: function (triggerType, name) { return exf().other.getExtension(triggerType, name) },
            getExtensionConfig: function () { return exf().other.getExtensionConfig() },
            getExtraAssetUrl: function (callback) { return exf().other.getExtraAssetUrl(callback) },
            getSceneBoundingBox: function () { return exf().other.getSceneBoundingBox() },
            getWalkMaxSpeed: function () { return exf().other.getWalkMaxSpeed() },
            helpVisible: function (boolean) { exf().other.helpVisible(boolean) },
            moveTarget: function (boolean = true) { exf().other.moveTarget(boolean) },
            onSceneLoadComplete: function (callback) { exf().other.onSceneLoadComplete(callback) },
            onSceneReadyToDisplay: function (callback) { exf().other.onSceneReadyToDisplay(callback) },
            play: function () { exf().other.play() },
            infoPanelClose: function () { exf().other.infoPanelClose() },
            requestFrame: function (node) { exf().other.requestFrame() },
            sceneMode: function (type) { if (type) exf().other.sceneMode(type); else return exf().other.sceneMode() },
            seeItem: function (node) { exf().other.seeItem(node) },
        }
    }

    window.KARDIA = {
        View: function () {
            const f = () => { return new WALK.View() }
            if (document.readyState == "loading") { document.addEventListener('load', f) } else { f() }

        },
        getViewer: () => {
            //check something
            if (!restrictDomain()) { return } else { delete this.a; return KARDIA_API() }
        }
    }

    // console.log(KARDIA.getViewer())
})();

//KARDIA.viewer.menu.style_1()
//KARDIA.viewer.menu.style_1()
//KARDIA.viewer.menu.style_2()
// KARDIA.viewer.onMaterialClicked('AG01-A2', () => { KARDIA.viewer.openPopUpScene('https://www.google.com/') })
// KARDIA.getViewer().floatingSocialChat.info('dexxr')
// KARDIA.getViewer().floatingSocialChat.disable()



function oriGraphicSize(file, btnIcon) {
    var arts = [];
    var assetfile = getExtraAssetUrl(file);
    $.getJSON(assetfile, function (json) {
        arts = json;

        let ag = document.createElement("div");
        ag.id = 'artworks';
        ag.style.display = 'none';
        //ag.dataset.status = 'active';
        document.body.appendChild(ag);

        Object.entries(arts).forEach(([key, value]) => {
            if (key == 'artwork' || key == 'graphic') {

                let cp = document.createElement("div");
                cp.id = key == 'artwork' ? 'artworks-size' : 'graphic-size';
                cp.style.display = 'none';
                //cp.dataset.status = 'deactive';
                document.body.appendChild(cp);

                Object.entries(value).forEach(([key, value]) => {

                    let t = 'art-no' in value ? 'art' : 'graphic',
                        tt = t == 'art' ? 'Artwork' : 'Graphic',
                        ano = value[`${t}-no`], at = value[`${t}-type`], aw = value[`${t}-width`], ah = value[`${t}-height`],
                        a = document.createElement("canvas"), ats = a.getContext("2d"),
                        m = value['material'];

                    a.id = ano + '_S';
                    a.dataset.status = 'deactive';
                    a.width = aw;
                    a.height = ah;
                    fs = 60;
                    ats.font = `${fs}px Arial`;
                    ats.textAlign = "center";
                    ats.rect(0, 0, aw, ah);
                    ats.fillStyle = "white";
                    ats.fill();
                    ats.fillStyle = "black";
                    ats.fillText(`${tt} Code: ${ano}`, aw / 2, ah / 2);
                    ats.fillText(`${tt} Max-Size: ${aw}W x ${ah}H`, aw / 2, ((ah / 2) + fs));
                    cp.appendChild(a);
                    viewer.setMaterialEditable(m);

                    let img = document.createElement('img');
                    img.id = ano;
                    img.src = getExtraAssetUrl(m + '.png');
                    img.dataset.status = 'active';
                    img.crossOrigin = "anonymous";
                    ag.appendChild(img);
                })

            }
        });

    })


    let btn = document.createElement('div');
    btn.id = 'graphicSwitch';
    document.body.appendChild(btn);
    btni = document.createRange().createContextualFragment(
        `<div style="top: 0;"><span class="graphic-active">Graphic Sample</span>` +
        `<i id="gsbtn" class="fa-solid fa-toggle-off"></i>` +
        `<span class="graphic-deactive">Graphic Size</span></div>`
    );
    btn.appendChild(btni);

    var style = `
  #graphicSwitch {
    position: absolute;
    z-index: 102;
    top: 10px;
    left: 50%;
    transform: translate(-50%);
    overflow: hidden;
  }
  #graphicSwitch > div {
    display: flex;
    align-items: center;
    background-color: var(--bg-clr-t-09);
    box-shadow: var(--buttom-box-shadow);
    color: darkgrey;
    border-radius: 100px;
    padding: 0 15px;
    position: relative;
    transition: top 1s ease;
  }
  #graphicSwitch > div > span {
    padding: 0 10px;
    min-width: 150px;
    text-align: center;
  }
  #graphicSwitch i {
    font-size: 24px;
    line-height: 44px;
    padding-right: 2px;
    color: black;
  }
  .graphic-active {
    color: black;
    font-weight: 700;
  }
  @media only screen and (max-width: 464px) {
    #graphicSwitch > div > span:nth-child(1) {
      order: 2;
    }
    #graphicSwitch > div > span:nth-child(3) {
      order: 3;
    }
    #graphicSwitch > div > i:nth-child(2) {
      order: 1;
    }
    .graphic-deactive {
      display: none;
    }
  }
  `;

    let css = document.createElement('style');
    css.type = 'text/css';
    css.innerHTML = style;
    document.body.appendChild(css);

    btn.addEventListener('click', function () {
        let btnA = btn.childNodes[0].childNodes[0],
            btnB = btn.childNodes[0].childNodes[2], btnI = btn.childNodes[0].childNodes[1],
            btna = 'graphic-active', btnda = 'graphic-deactive';

        if (btnA.classList.contains(btna)) {
            btnA.setAttribute("class", btnda);
            btnB.setAttribute("class", btna);
            btnI.setAttribute("class", "fa-solid fa-toggle-on");
        } else {
            btnA.setAttribute("class", btna);
            btnB.setAttribute("class", btnda);
            btnI.setAttribute("class", "fa-solid fa-toggle-off");
        }
        if (arts.length === 0) { console.log('No graphic size details.'); }
        Object.entries(arts).forEach(([key, value]) => {
            if (key == 'artwork' || key == 'graphic') {
                arts[key].forEach(function (art) {

                    let g = key == 'artwork' ? 'art-no' : 'graphic-no', c = art[g],
                        fc = (arts['sceneCode'] + '-' + art[g]).toUpperCase(), d = document.getElementById(c + '_S'),
                        m = viewer.findMaterial(fc), artw = document.getElementById('artworks');

                    if (d.dataset.status == 'deactive') {
                        var t = new WALK.Texture(d);
                        d.dataset.status = 'active';
                        t.width = d.width;
                        t.height = d.height;
                        t.hasAlpha = true;
                        t.minFilter = GLC.LINEAR;
                        //t.wrapS = GLC.REPEAT;
                        //t.wrapT = GLC.REPEAT;
                        t.needsUpdate = true;
                        t.notifyLoaded();

                    } else {
                        d.dataset.status = 'deactive';
                        var te = document.getElementById(c);
                        var texture = null;
                        if (texture === null) {
                            if (te instanceof HTMLVideoElement) {
                                // textureElement is <video>
                                t = viewer.createTextureFromHtmlVideo(te, hasAlpha = true);
                                t.isCutout = true;
                            } else {
                                // textureElement is <img>
                                t = viewer.createTextureFromHtmlImage(te, hasAlpha = true);
                                t.isCutout = true;
                            }
                        }
                    }

                    m.baseColorTexture = t;
                    viewer.requestFrame();
                })
            }
        })
    })
    if (getElement('menu-1-bar-folder') || getElement('menu-bar-folder')) {
        let a = getElement('menu-bar-folder') ? getElement('menu-bar-folder') : getElement('menu-1-bar-folder');
        if (typeof uxui.slide_on_off === 'function') {
            a.addEventListener("click", () => {
                uxui.slide_on_off(btn.childNodes[0], 'top');
            })
        }
    }

    var uxui = {}
    uxui.slide_on_off = function (object, direction, objectContainer = "", btn = '', objActiveCss = "") {
        //slider element style only {direction}: ?px

        if (isElement(object)) {
            var obj = object;
        } else {
            var obj = getElement(object);
        }
        let objs = obj.style;
        if (direction == "right") {
            var objDirection = objs.right;
            var objSize = obj.offsetWidth;
        } else if (direction == "left") {
            var objDirection = objs.left;
            var objSize = obj.offsetWidth;
        } else if (direction == "top") {
            var objDirection = objs.top;
            var objSize = obj.offsetHeight;
        } else if (direction == "bottom") {
            var objDirection = objs.bottom;
            var objSize = obj.offsetHeight;
        } else {
            return
        }
        if (objDirection == "0px" || null) {
            //open > close
            obj.setAttribute("style", `${direction}: -${objSize}px`);
            if (objectContainer != '') {
                getElement(objectContainer).style.pointerEvents = "none";
            }
            if (objActiveCss != '') {
                getElement(btn).classList.remove(objActiveCss);
            }
        } else {
            //close > open
            obj.setAttribute("style", `${direction}: 0px`);
            if (objectContainer != '') {
                getElement(objectContainer).style.pointerEvents = "auto";
            }
            if (objActiveCss != '') {
                getElement(btn).classList.add(objActiveCss);
            }
        }
    }
}